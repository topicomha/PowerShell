<?xml-stylesheet type="text/xsl" href="http://feeds.hanselman.com/feedblitz_rss.xslt"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/" xmlns:pingback="http://madskills.com/public/xml/rss/module/pingback/" xmlns:webfeeds="http://webfeeds.org/rss/1.0" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" version="2.0" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><channel><webfeeds:logo>https://www.hanselman.com/blog/images/zenicon.jpg</webfeeds:logo><webfeeds:analytics id="UA-130207-1" engine="GoogleAnalytics" /><title>Scott Hanselman's Blog</title><link>https://www.hanselman.com/blog/</link><description>Scott Hanselman on Programming, User Experience, The Zen of Computers and Life in General</description><image>
	<url>http://www.hanselman.com/blog/images/tinyheadshot2.jpg</url>
	<title>Scott Hanselman's Blog</title>
	<link>https://www.hanselman.com/blog/</link>
</image><copyright>Scott Hanselman</copyright><lastBuildDate>Tue, 14 Dec 2021 21:36:00 GMT</lastBuildDate><managingEditor>scott@hanselman.com</managingEditor><webMaster>scott@hanselman.com</webMaster>
<meta xmlns="http://www.w3.org/1999/xhtml" name="robots" content="noindex" />
<item>
<feedburner:origLink>https://www.hanselman.com/blog/using-home-assistant-to-integrate-a-unifi-protect-g4-doorbell-and-amazon-alexa-to-announce-visitors</feedburner:origLink><trackback:ping>https://www.hanselman.com/blog/feed/trackback/9632ddf9-403c-4319-bba6-4cb98bc7932b</trackback:ping><pingback:server>https://www.hanselman.com/blog/feed/pingback</pingback:server><pingback:target>https://www.hanselman.com/blog/post/9632ddf9-403c-4319-bba6-4cb98bc7932b</pingback:target><dc:creator>Scott Hanselman</dc:creator><wfw:comment>http://feeds.hanselman.com/~/676711904/0/scotthanselman~Using-Home-Assistant-to-integrate-a-Unifi-Protect-G-Doorbell-and-Amazon-Alexa-to-announce-visitors/comments#comments-start</wfw:comment><wfw:commentRss>https://www.hanselman.com/blog/feed/rss/comments/9632ddf9-403c-4319-bba6-4cb98bc7932b</wfw:commentRss><title>Using Home Assistant to integrate a Unifi Protect G4 Doorbell and Amazon Alexa to announce visitors</title><guid isPermaLink="false">https://www.hanselman.com/blog/post/9632ddf9-403c-4319-bba6-4cb98bc7932b</guid><link>http://feeds.hanselman.com/~/676711904/0/scotthanselman~Using-Home-Assistant-to-integrate-a-Unifi-Protect-G-Doorbell-and-Amazon-Alexa-to-announce-visitors</link><pubDate>Tue, 14 Dec 2021 21:36:00 GMT</pubDate><description><![CDATA[<div><p>I am not a <a href="https://www.home-assistant.io/">Home Assistant</a> expert, but it's clearly a massive and powerful ecosystem. I've interviewed <a href="https://hanselminutes.com/788/automating-all-the-things-with-home-assistants-paulus-schoutsen">the creator of Home Assistant on my podcast</a> and I encourage you to check out that chat.</p> <p>Home Assistant can quickly become a hobby that overwhelms you. Every object (entity) in your house that is even remotely connected can become programmable. Everything. Even people! You can declare that any name:value pair that (for example) your phone can expose can be consumable by Home Assistant. Questions like "is Scott home" or "what's Scott's phone battery" can be associated with Scott the Entity in the Home Assistant Dashboard. </p> <blockquote> <p>I was amazed at the devices/objects that Home Assistant discovered that it could automate. Lights, remotes, Spotify, and more. You'll find that any internally connected device you have likely has an Integration available.</p></blockquote> <p>Temperature, Light Status, sure, that's easy Home Automation. But integrations and 3rd party code can give you details like "Is the Living Room dark" or "is there motion in the driveway." From these building blocks, you can then build your own IFTTT (If This Then That) automations, combining not just two systems, but any and all disparate systems.</p> <p>What's the best part? This all runs LOCALLY. Not in a cloud or the cloud or anyone's cloud. I've got my stuff running on a <a href="https://amzn.to/3HnJ3IY">Raspberry Pi 4</a>. Even better I put a <a href="https://amzn.to/3HnJ3IY">Power Over Ethernet (PoE) hat on my Rpi</a> so I have just one network wire into my hub that powers the Pi.</p> <p>I believe setting up <a href="https://www.home-assistant.io/installation/raspberrypi/">Home Assistant on a Pi</a> is the best and easiest way to get started. That said, you can also run in a Docker Container, on a Synology or other NAS, or just on Windows or Mac in the background. It's up to you. Optionally, you can pay <a href="https://www.nabucasa.com/">Nabu Casa</a> $5 for remote (outside your house) network access via transparent forwarding. But to be clear, it all still runs inside your house and not in the cloud.</p> <p><img title="Basic Home Assistant Setup" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Basic Home Assistant Setup" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Using-Home-Assistant_E31C/image_c613af81-10de-49d3-aead-6e174ca870ca.png" width="600" height="550"></p> <p>OK, to the main point. I used to have an Amazon Ring Doorbell that would integrate with Amazon Alexa and when you pressed the doorbell it would say "Someone is at the front door" on our all Alexas. It was a lovely little integration that worked nicely in our lives.</p> <p><img title="Front Door UniFi G4 Doorbell" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="Front Door UniFi G4 Doorbell" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Using-Home-Assistant_E31C/image_165ff623-cdc3-40c0-9caf-46686032f539.png" width="485" height="357"></p> <p>However, I swapped out the Ring for a <a href="https://hacs.xyz/">Unifi Protect G4 Doorbell</a> for a number of reasons. I don't want to pump video to outside services, so this doorbell integrates nicely with my <a href="https://www.hanselman.com/blog/review-unifi-from-ubiquiti-networking-is-the-ultimate-prosumer-home-networking-solution">existing Unifi installation</a> and records video to a local hard drive. However, I lose any Alexa integration and this nice little "someone is at the door" announcement. So this seems like a perfect job for Home Assistant.</p> <p>Here's the general todo list:</p> <ul> <li>Install <a href="https://www.home-assistant.io/getting-started/">Home Assistant</a></li> <li>Install <a href="https://hacs.xyz/">Home Assistant Community Store</a></li> <ul> <li>This enables 3rd party "untrusted" integrations directly from GitHub. You'll need a GitHub account and it'll clone custom integrations directly into your local HA.</li> <li>I also recommend the Terminal &amp; SSH (9.2.2), File editor (5.3.3) add ons so you can see what's happening.</li></ul> <li>Get the <a href="https://github.com/briis/unifiprotect">UniFi Protect 3rd party integration for Home Assistant</a></li> <ul> <li><strong>NOTE</strong>: Unifi Protect support is being promoted in Home Assistant v2022.2 so you won't need this step soon as it'll be included.</li> <li>"The UniFi Protect Integration adds support for retrieving Camera feeds and Sensor data from a UniFi Protect installation on either an Ubiquiti CloudKey+, Ubiquiti UniFi Dream Machine Pro or UniFi Protect Network Video Recorder."</li> <li>Authenticate and configure this integration.</li></ul> <li>Get the <a href="https://github.com/custom-components/alexa_media_player">Alexa Media Player</a> integration</li> <ul> <li>This makes all your Alexas show up in Home Assistant as "media players" and also allows you to tts (text to speech) to them.</li> <li>Authenticate and configure this integration.</li></ul></ul> <p>I recommend going into your Alexa app and making a Multi-room Speaker Group called "everywhere." Not only because it's nice to be able to say "play the music everywhere" but you can also target that "Everywhere" group in Home Assistant.</p> <p>Go into your Home Assistant UI at <a title="http://homeassistant.local:8123/" href="http://homeassistant.local:8123/">http://homeassistant.local:8123/</a> and into <a href="https://www.home-assistant.io/docs/tools/dev-tools/">Developer Tools</a>. Under Services, try pasting in this YAML and clicking "call service."</p><pre>service: notify.alexa_media_everywhere
data:
  message: Someone is at the front door, this is a test
  data:
    type: announce
    method: speak</pre>
<p>If that works, you know you can automate Alexa and make it say things. Now, go to Configuration, Automation, and Add a new Automation. Here's mine. I used the UI to create it. Note that your Entity names may be different if you give your front doorbell camera a different name.</p>
<p><img title="Binary_sensor.front_door_doorbell" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="Binary_sensor.front_door_doorbell" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Using-Home-Assistant_E31C/image_6c40ad44-b67e-422c-97c8-41741af21066.png" width="404" height="389"></p>
<p>Notice the format of Data, it's name value pairs within a single field's value.</p>
<p><img title="Alexa Action" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="Alexa Action" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Using-Home-Assistant_E31C/image_5a58a5af-dd88-40f5-9c62-93202dbdf409.png" width="815" height="682"></p>
<p>...but it also exists in a file called Automations.yaml. Note that the "to: 'on'" trigger is required or you'll get double announcements, one for <em>each state change </em>in the doorbell. </p><pre>- id: '1640995128073'
  alias: G4 Doorbell Announcement with Alexa
  description: G4 Doorbell Announcement with Alexa
  trigger:
  - platform: state
    entity_id: binary_sensor.front_door_doorbell
    to: 'on'
  condition: []
  action:
  - service: notify.alexa_media_everywhere
    data:
      data:
        type: announce
        method: speak
      message: Someone is at the front door
  mode: single</pre>
<p>It works! There's a ton of cool stuff I can automate now!</p>
<hr>
<p><strong>Sponsor:</strong> Make login Auth0’s problem. Not yours. Provide the convenient login features your customers want, like social login, multi-factor authentication, single sign-on, passwordless, and more. <a href="https://hnsl.mn/34dSTyP">Get started for free.</a></p><br/><hr/>© 2021 Scott Hanselman. All rights reserved. <br/></div><div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/676711904/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/676711904/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/676711904/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/676711904/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</description><comments>http://feeds.hanselman.com/~/676711904/0/scotthanselman~Using-Home-Assistant-to-integrate-a-Unifi-Protect-G-Doorbell-and-Amazon-Alexa-to-announce-visitors/comments#comments-start</comments><category>Home Server</category><category>Musings</category><content:encoded><![CDATA[<div><p>I am not a <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.home-assistant.io/">Home Assistant</a> expert, but it's clearly a massive and powerful ecosystem. I've interviewed <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hanselminutes.com/788/automating-all-the-things-with-home-assistants-paulus-schoutsen">the creator of Home Assistant on my podcast</a> and I encourage you to check out that chat.</p> <p>Home Assistant can quickly become a hobby that overwhelms you. Every object (entity) in your house that is even remotely connected can become programmable. Everything. Even people! You can declare that any name:value pair that (for example) your phone can expose can be consumable by Home Assistant. Questions like "is Scott home" or "what's Scott's phone battery" can be associated with Scott the Entity in the Home Assistant Dashboard. </p> <blockquote> <p>I was amazed at the devices/objects that Home Assistant discovered that it could automate. Lights, remotes, Spotify, and more. You'll find that any internally connected device you have likely has an Integration available.</p></blockquote> <p>Temperature, Light Status, sure, that's easy Home Automation. But integrations and 3rd party code can give you details like "Is the Living Room dark" or "is there motion in the driveway." From these building blocks, you can then build your own IFTTT (If This Then That) automations, combining not just two systems, but any and all disparate systems.</p> <p>What's the best part? This all runs LOCALLY. Not in a cloud or the cloud or anyone's cloud. I've got my stuff running on a <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://amzn.to/3HnJ3IY">Raspberry Pi 4</a>. Even better I put a <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://amzn.to/3HnJ3IY">Power Over Ethernet (PoE) hat on my Rpi</a> so I have just one network wire into my hub that powers the Pi.</p> <p>I believe setting up <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.home-assistant.io/installation/raspberrypi/">Home Assistant on a Pi</a> is the best and easiest way to get started. That said, you can also run in a Docker Container, on a Synology or other NAS, or just on Windows or Mac in the background. It's up to you. Optionally, you can pay <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.nabucasa.com/">Nabu Casa</a> $5 for remote (outside your house) network access via transparent forwarding. But to be clear, it all still runs inside your house and not in the cloud.</p> <p><img title="Basic Home Assistant Setup" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Basic Home Assistant Setup" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Using-Home-Assistant_E31C/image_c613af81-10de-49d3-aead-6e174ca870ca.png" width="600" height="550"></p> <p>OK, to the main point. I used to have an Amazon Ring Doorbell that would integrate with Amazon Alexa and when you pressed the doorbell it would say "Someone is at the front door" on our all Alexas. It was a lovely little integration that worked nicely in our lives.</p> <p><img title="Front Door UniFi G4 Doorbell" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="Front Door UniFi G4 Doorbell" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Using-Home-Assistant_E31C/image_165ff623-cdc3-40c0-9caf-46686032f539.png" width="485" height="357"></p> <p>However, I swapped out the Ring for a <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hacs.xyz/">Unifi Protect G4 Doorbell</a> for a number of reasons. I don't want to pump video to outside services, so this doorbell integrates nicely with my <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/review-unifi-from-ubiquiti-networking-is-the-ultimate-prosumer-home-networking-solution">existing Unifi installation</a> and records video to a local hard drive. However, I lose any Alexa integration and this nice little "someone is at the door" announcement. So this seems like a perfect job for Home Assistant.</p> <p>Here's the general todo list:</p> <ul> <li>Install <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.home-assistant.io/getting-started/">Home Assistant</a></li> <li>Install <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hacs.xyz/">Home Assistant Community Store</a></li> <ul> <li>This enables 3rd party "untrusted" integrations directly from GitHub. You'll need a GitHub account and it'll clone custom integrations directly into your local HA.</li> <li>I also recommend the Terminal &amp; SSH (9.2.2), File editor (5.3.3) add ons so you can see what's happening.</li></ul> <li>Get the <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/briis/unifiprotect">UniFi Protect 3rd party integration for Home Assistant</a></li> <ul> <li><strong>NOTE</strong>: Unifi Protect support is being promoted in Home Assistant v2022.2 so you won't need this step soon as it'll be included.</li> <li>"The UniFi Protect Integration adds support for retrieving Camera feeds and Sensor data from a UniFi Protect installation on either an Ubiquiti CloudKey+, Ubiquiti UniFi Dream Machine Pro or UniFi Protect Network Video Recorder."</li> <li>Authenticate and configure this integration.</li></ul> <li>Get the <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/custom-components/alexa_media_player">Alexa Media Player</a> integration</li> <ul> <li>This makes all your Alexas show up in Home Assistant as "media players" and also allows you to tts (text to speech) to them.</li> <li>Authenticate and configure this integration.</li></ul></ul> <p>I recommend going into your Alexa app and making a Multi-room Speaker Group called "everywhere." Not only because it's nice to be able to say "play the music everywhere" but you can also target that "Everywhere" group in Home Assistant.</p> <p>Go into your Home Assistant UI at <a title="http://homeassistant.local:8123/" href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~homeassistant.local:8123/">http://homeassistant.local:8123/</a> and into <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.home-assistant.io/docs/tools/dev-tools/">Developer Tools</a>. Under Services, try pasting in this YAML and clicking "call service."</p><pre>service: notify.alexa_media_everywhere
data:
  message: Someone is at the front door, this is a test
  data:
    type: announce
    method: speak</pre>
<p>If that works, you know you can automate Alexa and make it say things. Now, go to Configuration, Automation, and Add a new Automation. Here's mine. I used the UI to create it. Note that your Entity names may be different if you give your front doorbell camera a different name.</p>
<p><img title="Binary_sensor.front_door_doorbell" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="Binary_sensor.front_door_doorbell" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Using-Home-Assistant_E31C/image_6c40ad44-b67e-422c-97c8-41741af21066.png" width="404" height="389"></p>
<p>Notice the format of Data, it's name value pairs within a single field's value.</p>
<p><img title="Alexa Action" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="Alexa Action" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/Using-Home-Assistant_E31C/image_5a58a5af-dd88-40f5-9c62-93202dbdf409.png" width="815" height="682"></p>
<p>...but it also exists in a file called Automations.yaml. Note that the "to: 'on'" trigger is required or you'll get double announcements, one for <em>each state change </em>in the doorbell. </p><pre>- id: '1640995128073'
  alias: G4 Doorbell Announcement with Alexa
  description: G4 Doorbell Announcement with Alexa
  trigger:
  - platform: state
    entity_id: binary_sensor.front_door_doorbell
    to: 'on'
  condition: []
  action:
  - service: notify.alexa_media_everywhere
    data:
      data:
        type: announce
        method: speak
      message: Someone is at the front door
  mode: single</pre>
<p>It works! There's a ton of cool stuff I can automate now!</p>
<hr>
<p><strong>Sponsor:</strong> Make login Auth0’s problem. Not yours. Provide the convenient login features your customers want, like social login, multi-factor authentication, single sign-on, passwordless, and more. <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hnsl.mn/34dSTyP">Get started for free.</a></p>
<br/><hr/>© 2021 Scott Hanselman. All rights reserved. 
<br/></div><Img align="left" border="0" height="1" width="1" alt="" style="border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;" hspace="0" src="http://feeds.hanselman.com/~/i/676711904/0/scotthanselman">
<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/676711904/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/676711904/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/676711904/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/676711904/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</content:encoded></item>
<item>
<feedburner:origLink>https://www.hanselman.com/blog/javascript-and-typescript-projects-with-react-angular-or-vue-in-visual-studio-2022-with-or-without-net</feedburner:origLink><trackback:ping>https://www.hanselman.com/blog/feed/trackback/0909e949-cd9a-4867-8e02-6e24660b1856</trackback:ping><pingback:server>https://www.hanselman.com/blog/feed/pingback</pingback:server><pingback:target>https://www.hanselman.com/blog/post/0909e949-cd9a-4867-8e02-6e24660b1856</pingback:target><dc:creator>Scott Hanselman</dc:creator><wfw:comment>http://feeds.hanselman.com/~/674283520/0/scotthanselman~JavaScript-and-TypeScript-Projects-with-React-Angular-or-Vue-in-Visual-Studio-with-or-without-NET/comments#comments-start</wfw:comment><wfw:commentRss>https://www.hanselman.com/blog/feed/rss/comments/0909e949-cd9a-4867-8e02-6e24660b1856</wfw:commentRss><slash:comments>1</slash:comments><title>JavaScript and TypeScript Projects with React, Angular, or Vue in Visual Studio 2022 with or without .NET</title><guid isPermaLink="false">https://www.hanselman.com/blog/post/0909e949-cd9a-4867-8e02-6e24660b1856</guid><link>http://feeds.hanselman.com/~/674283520/0/scotthanselman~JavaScript-and-TypeScript-Projects-with-React-Angular-or-Vue-in-Visual-Studio-with-or-without-NET</link><pubDate>Thu, 25 Nov 2021 20:50:00 GMT</pubDate><description><![CDATA[<div><p>I was reading <a href="https://devblogs.microsoft.com/visualstudio/the-new-javascript-typescript-experience-in-vs-2022-preview-3/">Gabby's blog post about the new TypeScript/JavaScript project experience in Visual Studio 2022</a>. You should read the docs on <a href="https://docs.microsoft.com/en-us/visualstudio/javascript/javascript-in-vs-2022?view=vs-2022">JavaScript and TypeScript in Visual Studio 2022</a>.</p> <p>If you're used to ASP.NET apps when you think about apps that are JavaScript heavy, "front end apps" or TypeScript focused, it can be confusing as to "where does .NET fit in?"</p> <p>You need to consider the responsibilities of your various projects or subsystems and the multiple totally valid ways you can build a web site or web app. Let's consider just a few:</p> <ol> <li><a href="https://docs.microsoft.com/en-us/visualstudio/javascript/tutorial-aspnet-with-typescript?view=vs-2022">An ASP.NET Web app that renders HTML on the server but uses TS/JS</a>  <ul> <li>This may have a Web API, Razor Pages, with or without the MVC pattern.  <li>You maybe have just added JavaScript via &lt;script&gt; tags  <li>Maybe you added a script minimizer/minifier task  <li>Can be confusing because it can feel like your app needs to 'build both the client and the server' from one project</li></ul> <li>A mostly JavaScript/TypeScript frontend app where the HTML could be served from any web server (node, kestrel, static web apps, nginx, etc)  <ul> <li>This app may use Vue or React or Angular but it's not an "ASP.NET app"  <li>It calls backend Web APIs that may be served by ASP.NET, Azure Functions, 3rd party REST APIs, or all of the above  <li>This scenario has sometimes been confusing for ASP.NET developers who may get confused about responsibility. Who builds what, where do things end up, how do I build and deploy this?</li></ul></li></ol> <p><a href="https://docs.microsoft.com/en-us/visualstudio/javascript/javascript-in-vs-2022?view=vs-2022">VS2022</a> brings JavaScript and TypeScript support into VS with a full JavaScript Language Service based on TS. It provides a TypeScript NuGet Package so you can build your whole app with MSBuild and VS will do the right thing.</p> <blockquote> <p><strong>NEW: </strong>Starting in Visual Studio 2022, there is a new JavaScript/TypeScript project type (.esproj) that allows you to create standalone Angular, React, and Vue projects in Visual Studio.</p></blockquote> <p>The .esproj concept is great for folks familiar with Visual Studio as we know that a Solution contains one or more Projects. Visual Studio manages files for a single application in a <em>Project</em>. The project includes source code, resources, and configuration files. In this case we can have a .csproj for a backend Web API and an .esproj that uses a client side template like Angular, React, or Vue.</p> <p>Thing is, historically when Visual Studio supported Angular, React, or Vue, it's templates were out of date and not updated enough. VS2022 uses the native CLIs for these front ends, solving that problem with <a href="https://angular.io/cli">Angular CLI</a>, <a href="https://github.com/facebook/create-react-app">Create React App</a>, and <a href="https://cli.vuejs.org/">Vue CLI</a>.</p> <p>If I am in VS and go "File New Project" there are Standalone templates that solve Example 2 above. I'll pick JavaScript React.</p> <p><img title="Standalone JavaScript Templates in VS2022" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Standalone JavaScript Templates in VS2022" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/97390fb5b7df_12523/image_8fbe4808-d001-4208-a77c-614f8ed4126d.png" width="567" height="610"></p> <p>Then I'll click "Add integration for Empty ASP.NET Web API. This will give me a frontend with javascript ready to call a ASP.NET Web API backend. I'll <a href="https://docs.microsoft.com/en-us/visualstudio/javascript/tutorial-asp-net-core-with-react?view=vs-2022">follow along here</a>.</p> <p><img title="Standalone JavaScript React Template" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Standalone JavaScript React Template" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/97390fb5b7df_12523/image_bc274b03-19f1-4f1f-8fb8-f9d2f9dce344.png" width="467" height="119"></p> <p>It then uses the React CLI to make the front end, which again, is cool as it's whatever version I want it to be.</p> <p><img title="React Create CLI" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="React Create CLI" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/97390fb5b7df_12523/image_3b618c5d-75cd-4dc3-b9c6-78be33dbe019.png" width="600" height="133"></p> <p>Then I'll add my ASP.NET Web API backend to the same solution, so now I have an esproj and a csproj like this</p> <p><img title="frontend and backend" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="frontend and backend" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/97390fb5b7df_12523/image_ecdd0c10-39eb-4eb9-aa87-6d9c712d362f.png" width="221" height="330"></p> <p>Now I have a nice clean two project system - in this case more JavaScript focused than .NET focused. This one uses npm to startup the project using their web development server and proxyMiddleware to proxy localhost:3000 calls over to the ASP.NET Web API project. </p> <p>Here is a React app served by npm calling over to the Weather service served from Kestrel on ASP.NET.</p> <figure><img title="npm app running in VS 2022 against an ASP.NET Web API" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="npm app running in VS 2022 against an ASP.NET Web API" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/97390fb5b7df_12523/image_5d1af2f4-4754-4aa8-9e24-8ab9fa23a01c.png" width="915" height="986"></figure><p>This is inverted than most ASP.NET Folks are used to, and that's OK. This shows me that Visual Studio 2022 can support either development style, use the CLI that is installed for whatever Frontend Framework, and allow me to choose what web server and web browser (via Launch.json) I want.</p> <p>If you want to flip it, and <a href="https://docs.microsoft.com/en-us/visualstudio/javascript/tutorial-aspnet-with-typescript?view=vs-2022">put ASP.NET Core as the primary and then bring in some TypeScript/JavaScript, follow this tutorial because</a> that's also possible!</p> <hr>  <p><strong>Sponsor: </strong>Make login Auth0’s problem. Not yours. Provide the convenient login features your customers want, like social login, multi-factor authentication, single sign-on, passwordless, and more. <a href="http://pubads.g.doubleclick.net/gampad/clk?id=5840349572&amp;iu=/6839/lqm.scotthanselman.site">Get started for free.</a></p><br/><hr/>© 2021 Scott Hanselman. All rights reserved. <br/></div><div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/674283520/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/674283520/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/674283520/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/674283520/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</description><comments>http://feeds.hanselman.com/~/674283520/0/scotthanselman~JavaScript-and-TypeScript-Projects-with-React-Angular-or-Vue-in-Visual-Studio-with-or-without-NET/comments#comments-start</comments><category>ASP.NET</category><category>Javascript</category><category>Web Services</category><content:encoded><![CDATA[<div><p>I was reading <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://devblogs.microsoft.com/visualstudio/the-new-javascript-typescript-experience-in-vs-2022-preview-3/">Gabby's blog post about the new TypeScript/JavaScript project experience in Visual Studio 2022</a>. You should read the docs on <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/visualstudio/javascript/javascript-in-vs-2022?view=vs-2022">JavaScript and TypeScript in Visual Studio 2022</a>.</p> <p>If you're used to ASP.NET apps when you think about apps that are JavaScript heavy, "front end apps" or TypeScript focused, it can be confusing as to "where does .NET fit in?"</p> <p>You need to consider the responsibilities of your various projects or subsystems and the multiple totally valid ways you can build a web site or web app. Let's consider just a few:</p> <ol> <li><a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/visualstudio/javascript/tutorial-aspnet-with-typescript?view=vs-2022">An ASP.NET Web app that renders HTML on the server but uses TS/JS</a>  <ul> <li>This may have a Web API, Razor Pages, with or without the MVC pattern.  <li>You maybe have just added JavaScript via &lt;script&gt; tags  <li>Maybe you added a script minimizer/minifier task  <li>Can be confusing because it can feel like your app needs to 'build both the client and the server' from one project</li></ul> <li>A mostly JavaScript/TypeScript frontend app where the HTML could be served from any web server (node, kestrel, static web apps, nginx, etc)  <ul> <li>This app may use Vue or React or Angular but it's not an "ASP.NET app"  <li>It calls backend Web APIs that may be served by ASP.NET, Azure Functions, 3rd party REST APIs, or all of the above  <li>This scenario has sometimes been confusing for ASP.NET developers who may get confused about responsibility. Who builds what, where do things end up, how do I build and deploy this?</li></ul></li></ol> <p><a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/visualstudio/javascript/javascript-in-vs-2022?view=vs-2022">VS2022</a> brings JavaScript and TypeScript support into VS with a full JavaScript Language Service based on TS. It provides a TypeScript NuGet Package so you can build your whole app with MSBuild and VS will do the right thing.</p> <blockquote> <p><strong>NEW: </strong>Starting in Visual Studio 2022, there is a new JavaScript/TypeScript project type (.esproj) that allows you to create standalone Angular, React, and Vue projects in Visual Studio.</p></blockquote> <p>The .esproj concept is great for folks familiar with Visual Studio as we know that a Solution contains one or more Projects. Visual Studio manages files for a single application in a <em>Project</em>. The project includes source code, resources, and configuration files. In this case we can have a .csproj for a backend Web API and an .esproj that uses a client side template like Angular, React, or Vue.</p> <p>Thing is, historically when Visual Studio supported Angular, React, or Vue, it's templates were out of date and not updated enough. VS2022 uses the native CLIs for these front ends, solving that problem with <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://angular.io/cli">Angular CLI</a>, <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/facebook/create-react-app">Create React App</a>, and <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://cli.vuejs.org/">Vue CLI</a>.</p> <p>If I am in VS and go "File New Project" there are Standalone templates that solve Example 2 above. I'll pick JavaScript React.</p> <p><img title="Standalone JavaScript Templates in VS2022" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Standalone JavaScript Templates in VS2022" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/97390fb5b7df_12523/image_8fbe4808-d001-4208-a77c-614f8ed4126d.png" width="567" height="610"></p> <p>Then I'll click "Add integration for Empty ASP.NET Web API. This will give me a frontend with javascript ready to call a ASP.NET Web API backend. I'll <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/visualstudio/javascript/tutorial-asp-net-core-with-react?view=vs-2022">follow along here</a>.</p> <p><img title="Standalone JavaScript React Template" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Standalone JavaScript React Template" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/97390fb5b7df_12523/image_bc274b03-19f1-4f1f-8fb8-f9d2f9dce344.png" width="467" height="119"></p> <p>It then uses the React CLI to make the front end, which again, is cool as it's whatever version I want it to be.</p> <p><img title="React Create CLI" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="React Create CLI" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/97390fb5b7df_12523/image_3b618c5d-75cd-4dc3-b9c6-78be33dbe019.png" width="600" height="133"></p> <p>Then I'll add my ASP.NET Web API backend to the same solution, so now I have an esproj and a csproj like this</p> <p><img title="frontend and backend" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="frontend and backend" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/97390fb5b7df_12523/image_ecdd0c10-39eb-4eb9-aa87-6d9c712d362f.png" width="221" height="330"></p> <p>Now I have a nice clean two project system - in this case more JavaScript focused than .NET focused. This one uses npm to startup the project using their web development server and proxyMiddleware to proxy localhost:3000 calls over to the ASP.NET Web API project. </p> <p>Here is a React app served by npm calling over to the Weather service served from Kestrel on ASP.NET.</p> <figure><img title="npm app running in VS 2022 against an ASP.NET Web API" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="npm app running in VS 2022 against an ASP.NET Web API" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/97390fb5b7df_12523/image_5d1af2f4-4754-4aa8-9e24-8ab9fa23a01c.png" width="915" height="986"></figure><p>This is inverted than most ASP.NET Folks are used to, and that's OK. This shows me that Visual Studio 2022 can support either development style, use the CLI that is installed for whatever Frontend Framework, and allow me to choose what web server and web browser (via Launch.json) I want.</p> <p>If you want to flip it, and <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/visualstudio/javascript/tutorial-aspnet-with-typescript?view=vs-2022">put ASP.NET Core as the primary and then bring in some TypeScript/JavaScript, follow this tutorial because</a> that's also possible!</p> <hr>  <p><strong>Sponsor: </strong>Make login Auth0’s problem. Not yours. Provide the convenient login features your customers want, like social login, multi-factor authentication, single sign-on, passwordless, and more. <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~pubads.g.doubleclick.net/gampad/clk?id=5840349572&amp;iu=/6839/lqm.scotthanselman.site">Get started for free.</a></p>
<br/><hr/>© 2021 Scott Hanselman. All rights reserved. 
<br/></div><Img align="left" border="0" height="1" width="1" alt="" style="border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;" hspace="0" src="http://feeds.hanselman.com/~/i/674283520/0/scotthanselman">
<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/674283520/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/674283520/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/674283520/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/674283520/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</content:encoded></item>
<item>
<feedburner:origLink>https://www.hanselman.com/blog/a-nightscout-segment-for-ohmyposh-shows-my-realtime-blood-sugar-readings-in-my-git-prompt</feedburner:origLink><trackback:ping>https://www.hanselman.com/blog/feed/trackback/495513ca-ca88-421f-8ade-50e4cf17d747</trackback:ping><pingback:server>https://www.hanselman.com/blog/feed/pingback</pingback:server><pingback:target>https://www.hanselman.com/blog/post/495513ca-ca88-421f-8ade-50e4cf17d747</pingback:target><dc:creator>Scott Hanselman</dc:creator><wfw:comment>http://feeds.hanselman.com/~/673947624/0/scotthanselman~A-Nightscout-Segment-for-OhMyPosh-shows-my-realtime-Blood-Sugar-readings-in-my-Git-Prompt/comments#comments-start</wfw:comment><wfw:commentRss>https://www.hanselman.com/blog/feed/rss/comments/495513ca-ca88-421f-8ade-50e4cf17d747</wfw:commentRss><slash:comments>3</slash:comments><title>A Nightscout Segment for OhMyPosh shows my realtime Blood Sugar readings in my Git Prompt</title><guid isPermaLink="false">https://www.hanselman.com/blog/post/495513ca-ca88-421f-8ade-50e4cf17d747</guid><link>http://feeds.hanselman.com/~/673947624/0/scotthanselman~A-Nightscout-Segment-for-OhMyPosh-shows-my-realtime-Blood-Sugar-readings-in-my-Git-Prompt</link><pubDate>Tue, 23 Nov 2021 20:02:00 GMT</pubDate><description><![CDATA[<div><p>I've talked about <a href="https://www.hanselman.com/blog/my-ultimate-powershell-prompt-with-oh-my-posh-and-the-windows-terminal">how I love a nice pretty prompt in my Windows Terminal</a> and <a href="https://www.youtube.com/watch?v=VT2L1SXFq9U">made videos showing in detail how to do it</a>. I've also worked with my buddy <a href="https://www.hanselman.com/blog/visualizing-your-realtime-blood-sugar-values-and-a-git-prompt-on-windows-powershell-and-linux-bash">TooTallNate to put my real-time blood sugar into a bash or PowerShell prompt</a>, but this was back in 2017.</p> <p>Now that I'm "Team <a href="https://ohmyposh.dev/">OhMyPosh</a>" I have been meaning to write a Nightscout "segment" for my prompt. <a href="https://www.nightscoutfoundation.org/how-you-can-help">Nightscout</a> is an open source self-hosted (there are <a href="https://www.t1pal.com/">commercial hosts also like T1Pal</a>) website and API for remote display of real-time and near-real-time glucose readings for Diabetics like myself.</p> <p>Since my body has an active REST API where I can just do an HTTP GET (via curl or whatever) and see my blood sugar, it clearly belongs in a place of honor, just like my current Git Branch! </p> <figure><img title="My blood sugar in my Prompt!" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="My blood sugar in my Prompt!" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/a1ea1c6a57b0_119D3/image_d14e0906-8932-44e0-a493-86eeac62c1ae.png" width="999" height="37"></p> <p><a href="https://ohmyposh.dev/docs/">Oh My Posh supports configurable "segments"</a> and now there's a beta (still needs mmol and stale readings support) <a href="https://ohmyposh.dev/docs/nightscout">Nightscout segment</a> that you can setup in just a few minutes! </figure> <p>This prompt works in ANY shell on ANY os! You can do this in zsh, PowerShell, Bash, whatever makes you happy.</p> <p>Here is a YouTube of Jan from OhMyPosh and I coding the segment LIVE in Go.</p> <center> <div class="embed-container"><iframe title="YouTube video player" height="315" src="https://www.youtube.com/embed/_meKUIm9NwA" frameborder="0" width="560" allowfullscreen allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe></div></center> <p>If you have an existing OhMyPosh json config, you can just add another segment like this. Make sure your Nightscout URL includes a secure Token or is public (up to you). Note also that I setup "if/then" rules in my background_templates. These are optional and up to you to change to your taste. I set my background colors to red, yellow, green depending on sugar numbers. I also have a foreground template that is not really used, as you can see it always evaluates to black #000, but it shows you how you could set it to white text on a darker background if you wanted. </p><pre class="brush: js; gutter: false; toolbar: false; auto-links: false; smart-tabs: false;">{<br>  "type": "nightscout",<br>  "style": "diamond",<br>  "foreground": "#ffffff",<br>  "background": "#ff0000",<br>  "background_templates": [<br>    "{{ if gt .Sgv 150 }}#FFFF00{{ end }}",<br>    "{{ if lt .Sgv 60 }}#FF0000{{ end }}",<br>    "#00FF00"<br>  ],<br>  "foreground_templates": [<br>    "{{ if gt .Sgv 150 }}#000000{{ end }}",<br>    "{{ if lt .Sgv 60 }}#000000{{ end }}",<br>    "#000000"<br>  ],<br><br>  "leading_diamond": "",<br>  "trailing_diamond": "\uE0B0",<br>  "properties": {<br>    "url": "https://YOURNIGHTSCOUTAPP.herokuapp.com/api/v1/entries.json?count=1&amp;token=APITOKENFROMYOURADMIN",<br>    "http_timeout": 1500,<br>    "template": " {{.Sgv}}{{.TrendIcon}}"<br>  }<br>},
</pre>
<p>By default we will only go out and hit your Nightscout instance every 5 min, only when the prompt is repainted, and we'll only wait 1500ms before giving up. You can set that "http_timeout" (how long before we give up) if you feel this slows you down. It'll be cached for 5 min so it's unlikely&nbsp; to b something you'll notice. The benefit of this new OhMyPosh segment over the previous solution is that it requires no additional services/chron jobs and can be setup extremely quickly. Note also that you can customize your template with <a href="https://www.hanselman.com/blog/how-to-make-a-pretty-prompt-in-windows-terminal-with-powerline-nerd-fonts-cascadia-code-wsl-and-ohmyposh">NerdFonts</a>. I've included a tiny syringe!</p>
<figure><img title="What a lovely prompt with Blood Sugar!" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="What a lovely prompt with Blood Sugar!" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/a1ea1c6a57b0_119D3/image_84db877d-82c9-4d16-8788-e2692ce7a7e9.png" width="999" height="111"></figure>
<p>Next I'll hope to improve the segment with mmol support as well as strikeout style for "stale" (over 15 min old) results. You're also welcome to help out by watching <a href="https://www.youtube.com/watch?v=_meKUIm9NwA">our YouTube</a> and submitting a PR! 
<hr>
<p><strong>Sponsor: </strong>Make login Auth0’s problem. Not yours. Provide the convenient login features your customers want, like social login, multi-factor authentication, single sign-on, passwordless, and more. <a href="http://pubads.g.doubleclick.net/gampad/clk?id=5840349572&amp;iu=/6839/lqm.scotthanselman.site">Get started for free.</a></p><br/><hr/>© 2021 Scott Hanselman. All rights reserved. <br/></div><div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/673947624/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/673947624/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/673947624/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/673947624/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</description><comments>http://feeds.hanselman.com/~/673947624/0/scotthanselman~A-Nightscout-Segment-for-OhMyPosh-shows-my-realtime-Blood-Sugar-readings-in-my-Git-Prompt/comments#comments-start</comments><category>Diabetes</category><category>Open Source</category><content:encoded><![CDATA[<div><p>I've talked about <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/my-ultimate-powershell-prompt-with-oh-my-posh-and-the-windows-terminal">how I love a nice pretty prompt in my Windows Terminal</a> and <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.youtube.com/watch?v=VT2L1SXFq9U">made videos showing in detail how to do it</a>. I've also worked with my buddy <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/visualizing-your-realtime-blood-sugar-values-and-a-git-prompt-on-windows-powershell-and-linux-bash">TooTallNate to put my real-time blood sugar into a bash or PowerShell prompt</a>, but this was back in 2017.</p> <p>Now that I'm "Team <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://ohmyposh.dev/">OhMyPosh</a>" I have been meaning to write a Nightscout "segment" for my prompt. <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.nightscoutfoundation.org/how-you-can-help">Nightscout</a> is an open source self-hosted (there are <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.t1pal.com/">commercial hosts also like T1Pal</a>) website and API for remote display of real-time and near-real-time glucose readings for Diabetics like myself.</p> <p>Since my body has an active REST API where I can just do an HTTP GET (via curl or whatever) and see my blood sugar, it clearly belongs in a place of honor, just like my current Git Branch! </p> <figure><img title="My blood sugar in my Prompt!" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="My blood sugar in my Prompt!" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/a1ea1c6a57b0_119D3/image_d14e0906-8932-44e0-a493-86eeac62c1ae.png" width="999" height="37"></p> <p><a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://ohmyposh.dev/docs/">Oh My Posh supports configurable "segments"</a> and now there's a beta (still needs mmol and stale readings support) <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://ohmyposh.dev/docs/nightscout">Nightscout segment</a> that you can setup in just a few minutes! </figure> <p>This prompt works in ANY shell on ANY os! You can do this in zsh, PowerShell, Bash, whatever makes you happy.</p> <p>Here is a YouTube of Jan from OhMyPosh and I coding the segment LIVE in Go.</p> <center> <div class="embed-container"><iframe title="YouTube video player" height="315" src="https://www.youtube.com/embed/_meKUIm9NwA" frameborder="0" width="560" allowfullscreen allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe></div></center> <p>If you have an existing OhMyPosh json config, you can just add another segment like this. Make sure your Nightscout URL includes a secure Token or is public (up to you). Note also that I setup "if/then" rules in my background_templates. These are optional and up to you to change to your taste. I set my background colors to red, yellow, green depending on sugar numbers. I also have a foreground template that is not really used, as you can see it always evaluates to black #000, but it shows you how you could set it to white text on a darker background if you wanted. </p><pre class="brush: js; gutter: false; toolbar: false; auto-links: false; smart-tabs: false;">{
<br>  "type": "nightscout",
<br>  "style": "diamond",
<br>  "foreground": "#ffffff",
<br>  "background": "#ff0000",
<br>  "background_templates": [
<br>    "{{ if gt .Sgv 150 }}#FFFF00{{ end }}",
<br>    "{{ if lt .Sgv 60 }}#FF0000{{ end }}",
<br>    "#00FF00"
<br>  ],
<br>  "foreground_templates": [
<br>    "{{ if gt .Sgv 150 }}#000000{{ end }}",
<br>    "{{ if lt .Sgv 60 }}#000000{{ end }}",
<br>    "#000000"
<br>  ],
<br>
<br>  "leading_diamond": "",
<br>  "trailing_diamond": "\uE0B0",
<br>  "properties": {
<br>    "url": "https://YOURNIGHTSCOUTAPP.herokuapp.com/api/v1/entries.json?count=1&amp;token=APITOKENFROMYOURADMIN",
<br>    "http_timeout": 1500,
<br>    "template": " {{.Sgv}}{{.TrendIcon}}"
<br>  }
<br>},
</pre>
<p>By default we will only go out and hit your Nightscout instance every 5 min, only when the prompt is repainted, and we'll only wait 1500ms before giving up. You can set that "http_timeout" (how long before we give up) if you feel this slows you down. It'll be cached for 5 min so it's unlikely&nbsp; to b something you'll notice. The benefit of this new OhMyPosh segment over the previous solution is that it requires no additional services/chron jobs and can be setup extremely quickly. Note also that you can customize your template with <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/how-to-make-a-pretty-prompt-in-windows-terminal-with-powerline-nerd-fonts-cascadia-code-wsl-and-ohmyposh">NerdFonts</a>. I've included a tiny syringe!</p>
<figure><img title="What a lovely prompt with Blood Sugar!" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="What a lovely prompt with Blood Sugar!" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/a1ea1c6a57b0_119D3/image_84db877d-82c9-4d16-8788-e2692ce7a7e9.png" width="999" height="111"></figure>
<p>Next I'll hope to improve the segment with mmol support as well as strikeout style for "stale" (over 15 min old) results. You're also welcome to help out by watching <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.youtube.com/watch?v=_meKUIm9NwA">our YouTube</a> and submitting a PR! 
<hr>
<p><strong>Sponsor: </strong>Make login Auth0’s problem. Not yours. Provide the convenient login features your customers want, like social login, multi-factor authentication, single sign-on, passwordless, and more. <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~pubads.g.doubleclick.net/gampad/clk?id=5840349572&amp;iu=/6839/lqm.scotthanselman.site">Get started for free.</a></p>
<br/><hr/>© 2021 Scott Hanselman. All rights reserved. 
<br/></div><Img align="left" border="0" height="1" width="1" alt="" style="border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;" hspace="0" src="http://feeds.hanselman.com/~/i/673947624/0/scotthanselman">
<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/673947624/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/673947624/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/673947624/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/673947624/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</content:encoded></item>
<item>
<feedburner:origLink>https://www.hanselman.com/blog/upgrading-a-20-year-old-university-project-to-net-6-with-dotnetupgradeassistant</feedburner:origLink><trackback:ping>https://www.hanselman.com/blog/feed/trackback/efee6f41-a33b-4fb4-9af0-6a8df6b9539b</trackback:ping><pingback:server>https://www.hanselman.com/blog/feed/pingback</pingback:server><pingback:target>https://www.hanselman.com/blog/post/efee6f41-a33b-4fb4-9af0-6a8df6b9539b</pingback:target><dc:creator>Scott Hanselman</dc:creator><wfw:comment>http://feeds.hanselman.com/~/673659136/0/scotthanselman~Upgrading-a-year-old-University-Project-to-NET-with-dotnetupgradeassistant/comments#comments-start</wfw:comment><wfw:commentRss>https://www.hanselman.com/blog/feed/rss/comments/efee6f41-a33b-4fb4-9af0-6a8df6b9539b</wfw:commentRss><slash:comments>7</slash:comments><title>Upgrading a 20 year old University Project to .NET 6 with dotnet-upgrade-assistant</title><guid isPermaLink="false">https://www.hanselman.com/blog/post/efee6f41-a33b-4fb4-9af0-6a8df6b9539b</guid><link>http://feeds.hanselman.com/~/673659136/0/scotthanselman~Upgrading-a-year-old-University-Project-to-NET-with-dotnetupgradeassistant</link><pubDate>Thu, 18 Nov 2021 21:18:00 GMT</pubDate><description><![CDATA[<div><p>I wrote a <a href="https://www.hanselman.com/blog/rescuing-the-tiny-os-in-c">Tiny Virtual Operating System</a> for a 300-level OS class in C# for college back in 2001 (?) and later <a href="https://www.hanselman.com/blog/ive-ported-my-tiny-abstract-os-and-cpu-in-c-projectnbspfr">moved it to VB.NET in 2002</a>. This is all pre-.NET Core, and on early .NET 1.1 or 2.0 on Windows. I <a href="https://github.com/shanselman/TinyOS">moved it to GitHub 5 years ago</a> and <a href="https://www.hanselman.com/blog/porting-a-15-year-old-net-11-virtual-cpu-tiny-operating-system-school-project-to-net-core-20">ported it to .NET Core 2.0 at the time</a>. At this point it was 15 years old, so it was cool to see this project running on Windows, Linux, in Docker, and on a Raspberry Pi...a machine that didn't exist when the project was originally written.</p> <blockquote> <p><strong>NOTE: </strong>If the timeline is confusing, I had already been working in industry for years at this point but was still plugging away at my 4 year degree at night. It eventually took 11 years to complete my BS in Software Engineering.</p></blockquote> <p>This evening, as the children slept, I wanted to see if I could run the <a href="https://dotnet.microsoft.com/platform/upgrade-assistant">.NET Upgrade Assistant</a> on this now 20 year old app and get it running on .NET 6. </p> <p>Let's start:</p><pre>$ upgrade-assistant upgrade .\TinyOS.sln<br>-----------------------------------------------------------------------------------------------------------------<br>Microsoft .NET Upgrade Assistant v0.3.256001+3c4e05c787f588e940fe73bfa78d7eedfe0190bd<br><br>We are interested in your feedback! Please use the following link to open a survey: https://aka.ms/DotNetUASurvey<br>-----------------------------------------------------------------------------------------------------------------<br><br>[22:58:01 INF] Loaded 5 extensions<br>[22:58:02 INF] Using MSBuild from C:\Program Files\dotnet\sdk\6.0.100\<br>[22:58:02 INF] Using Visual Studio install from C:\Program Files\Microsoft Visual Studio\2022\Preview [v17]<br>[22:58:06 INF] Initializing upgrade step Select an entrypoint<br>[22:58:07 INF] Setting entrypoint to only project in solution: C:\Users\scott\TinyOS\src\TinyOSCore\TinyOSCore.csproj<br>[22:58:07 INF] Recommending executable TFM net6.0 because the project builds to an executable<br>[22:58:07 INF] Initializing upgrade step Select project to upgrade<br>[22:58:07 INF] Recommending executable TFM net6.0 because the project builds to an executable<br>[22:58:07 INF] Recommending executable TFM net6.0 because the project builds to an executable<br>[22:58:07 INF] Initializing upgrade step Back up project</pre>
<p>See how the process is interactive at the command line, with color prompts and a series of dynamic multiple-choice questions?</p><figure><img title="Updating .NET project with the upgrade assistant" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Updating .NET project with the upgrade assistant" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/16297583fa52_12B8A/image_102c9b35-682a-46ed-9bb3-3d313ddda313.png" width="939" height="352"></figure> 
<p>Interestingly, it builds on the first try, no errors.</p>
<p>When I manually look at the .csproj I can see some weird version numbers, likely from some not-quite-baked version of .NET Core 2 I used many years ago. My spidey sense says this is wrong, and I'm assuming the upgrade assistant didn't understand it. </p><pre class="brush: xml; gutter: false; toolbar: false; auto-links: false; smart-tabs: false;">    &lt;!-- &lt;PackageReference Include="ILLink.Tasks" Version="0.1.4-preview-906439" /&gt; --&gt;<br>    &lt;PackageReference Include="Microsoft.Extensions.Configuration" Version="2.0.0-preview2-final" /&gt;<br>    &lt;PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="2.0.0-preview2-final" /&gt;<br>    &lt;PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="2.0.0-preview2-final" /&gt;<br>    &lt;PackageReference Include="Microsoft.Extensions.Options.ConfigurationExtensions" Version="2.0.0-preview2-final" /&gt;
</pre>
<p>I also note a commented-out reference to ILLink.Tasks which was a preview feature in Mono's Linker to reduce the final size of apps and tree-trim them. Some of that functionality is built into .NET 6 now so I'll use that during the build and packaging process later. The reference is not needed today.</p>
<p>I'm gonna blindly upgrade them to .NET 6 and see what happens. I could do this by just changing the numbers and seeing if it restores and builds, but I can also try <a href="https://www.hanselman.com/blog/your-dotnet-outdated-is-outdated-update-and-help-keep-your-net-projects-up-to-date">dotnet outdated</a> which remains a lovely tool in the upgrader's toolkit.</p><figure><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/16297583fa52_12B8A/image_4a71ee64-6bb1-4730-86f8-689475662465.png" width="999" height="156"></figure> 
<p>This "outdated" tool is nice as it talks to NuGet and confirms that there are newer versions of certain packages.</p>
<p>In my tests - which were just batch files at this early time - I was calling my dotnet app like this:</p><pre>dotnet netcoreapp2.0/TinyOSCore.dll 512 scott13.txt  </pre>
<p>This will change to the modern form with just <code>TinyOSCore.exe 512 scott13.txt</code> with an exe and args and no ceremony.</p>
<p>Publishing and trimming my TinyOS turns into just a 15 meg EXE. Nice considering that the .NET I need is in there with no separate install. I could turn this little synthetic OS into a microservice if I wanted to be totally extra.</p><pre>dotnet publish -r win-x64 --self-contained -p:PublishSingleFile=true -p:SuppressTrimAnalysisWarnings=true</pre>
<p>If I add </p><pre>-p:EnableCompressionInSingleFile=true</pre>
<p>Then it's even smaller. No code changes. Run all my tests, looks good. My project from university from .NET 1.1 is now .NET 6.0, cross platform, self-contained in 11 megs in a single EXE. Sweet.</p>
<hr>
<p><strong>Sponsor: </strong>At Rocket Mortgage® the work you do around here will be 100% impactful but won’t take all your free time, giving you the perfect work-life balance. Or as we call it, tech/life balance! <a href="https://hnsl.mn/3qVUu5O">Learn more.</a></p><br/><hr/>© 2021 Scott Hanselman. All rights reserved. <br/></div><div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/673659136/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/673659136/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/673659136/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/673659136/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</description><comments>http://feeds.hanselman.com/~/673659136/0/scotthanselman~Upgrading-a-year-old-University-Project-to-NET-with-dotnetupgradeassistant/comments#comments-start</comments><category>DotNetCore</category><category>Open Source</category><content:encoded><![CDATA[<div><p>I wrote a <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/rescuing-the-tiny-os-in-c">Tiny Virtual Operating System</a> for a 300-level OS class in C# for college back in 2001 (?) and later <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/ive-ported-my-tiny-abstract-os-and-cpu-in-c-projectnbspfr">moved it to VB.NET in 2002</a>. This is all pre-.NET Core, and on early .NET 1.1 or 2.0 on Windows. I <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/shanselman/TinyOS">moved it to GitHub 5 years ago</a> and <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/porting-a-15-year-old-net-11-virtual-cpu-tiny-operating-system-school-project-to-net-core-20">ported it to .NET Core 2.0 at the time</a>. At this point it was 15 years old, so it was cool to see this project running on Windows, Linux, in Docker, and on a Raspberry Pi...a machine that didn't exist when the project was originally written.</p> <blockquote> <p><strong>NOTE: </strong>If the timeline is confusing, I had already been working in industry for years at this point but was still plugging away at my 4 year degree at night. It eventually took 11 years to complete my BS in Software Engineering.</p></blockquote> <p>This evening, as the children slept, I wanted to see if I could run the <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://dotnet.microsoft.com/platform/upgrade-assistant">.NET Upgrade Assistant</a> on this now 20 year old app and get it running on .NET 6. </p> <p>Let's start:</p><pre>$ upgrade-assistant upgrade .\TinyOS.sln
<br>-----------------------------------------------------------------------------------------------------------------
<br>Microsoft .NET Upgrade Assistant v0.3.256001+3c4e05c787f588e940fe73bfa78d7eedfe0190bd
<br>
<br>We are interested in your feedback! Please use the following link to open a survey: https://aka.ms/DotNetUASurvey
<br>-----------------------------------------------------------------------------------------------------------------
<br>
<br>[22:58:01 INF] Loaded 5 extensions
<br>[22:58:02 INF] Using MSBuild from C:\Program Files\dotnet\sdk\6.0.100\
<br>[22:58:02 INF] Using Visual Studio install from C:\Program Files\Microsoft Visual Studio\2022\Preview [v17]
<br>[22:58:06 INF] Initializing upgrade step Select an entrypoint
<br>[22:58:07 INF] Setting entrypoint to only project in solution: C:\Users\scott\TinyOS\src\TinyOSCore\TinyOSCore.csproj
<br>[22:58:07 INF] Recommending executable TFM net6.0 because the project builds to an executable
<br>[22:58:07 INF] Initializing upgrade step Select project to upgrade
<br>[22:58:07 INF] Recommending executable TFM net6.0 because the project builds to an executable
<br>[22:58:07 INF] Recommending executable TFM net6.0 because the project builds to an executable
<br>[22:58:07 INF] Initializing upgrade step Back up project</pre>
<p>See how the process is interactive at the command line, with color prompts and a series of dynamic multiple-choice questions?</p><figure><img title="Updating .NET project with the upgrade assistant" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Updating .NET project with the upgrade assistant" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/16297583fa52_12B8A/image_102c9b35-682a-46ed-9bb3-3d313ddda313.png" width="939" height="352"></figure> 
<p>Interestingly, it builds on the first try, no errors.</p>
<p>When I manually look at the .csproj I can see some weird version numbers, likely from some not-quite-baked version of .NET Core 2 I used many years ago. My spidey sense says this is wrong, and I'm assuming the upgrade assistant didn't understand it. </p><pre class="brush: xml; gutter: false; toolbar: false; auto-links: false; smart-tabs: false;">    &lt;!-- &lt;PackageReference Include="ILLink.Tasks" Version="0.1.4-preview-906439" /&gt; --&gt;
<br>    &lt;PackageReference Include="Microsoft.Extensions.Configuration" Version="2.0.0-preview2-final" /&gt;
<br>    &lt;PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="2.0.0-preview2-final" /&gt;
<br>    &lt;PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="2.0.0-preview2-final" /&gt;
<br>    &lt;PackageReference Include="Microsoft.Extensions.Options.ConfigurationExtensions" Version="2.0.0-preview2-final" /&gt;
</pre>
<p>I also note a commented-out reference to ILLink.Tasks which was a preview feature in Mono's Linker to reduce the final size of apps and tree-trim them. Some of that functionality is built into .NET 6 now so I'll use that during the build and packaging process later. The reference is not needed today.</p>
<p>I'm gonna blindly upgrade them to .NET 6 and see what happens. I could do this by just changing the numbers and seeing if it restores and builds, but I can also try <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/your-dotnet-outdated-is-outdated-update-and-help-keep-your-net-projects-up-to-date">dotnet outdated</a> which remains a lovely tool in the upgrader's toolkit.</p><figure><img title="image" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="image" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/16297583fa52_12B8A/image_4a71ee64-6bb1-4730-86f8-689475662465.png" width="999" height="156"></figure> 
<p>This "outdated" tool is nice as it talks to NuGet and confirms that there are newer versions of certain packages.</p>
<p>In my tests - which were just batch files at this early time - I was calling my dotnet app like this:</p><pre>dotnet netcoreapp2.0/TinyOSCore.dll 512 scott13.txt  </pre>
<p>This will change to the modern form with just <code>TinyOSCore.exe 512 scott13.txt</code> with an exe and args and no ceremony.</p>
<p>Publishing and trimming my TinyOS turns into just a 15 meg EXE. Nice considering that the .NET I need is in there with no separate install. I could turn this little synthetic OS into a microservice if I wanted to be totally extra.</p><pre>dotnet publish -r win-x64 --self-contained -p:PublishSingleFile=true -p:SuppressTrimAnalysisWarnings=true</pre>
<p>If I add </p><pre>-p:EnableCompressionInSingleFile=true</pre>
<p>Then it's even smaller. No code changes. Run all my tests, looks good. My project from university from .NET 1.1 is now .NET 6.0, cross platform, self-contained in 11 megs in a single EXE. Sweet.</p>
<hr>
<p><strong>Sponsor: </strong>At Rocket Mortgage® the work you do around here will be 100% impactful but won’t take all your free time, giving you the perfect work-life balance. Or as we call it, tech/life balance! <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hnsl.mn/3qVUu5O">Learn more.</a></p>
<br/><hr/>© 2021 Scott Hanselman. All rights reserved. 
<br/></div><Img align="left" border="0" height="1" width="1" alt="" style="border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;" hspace="0" src="http://feeds.hanselman.com/~/i/673659136/0/scotthanselman">
<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/673659136/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/673659136/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/673659136/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/673659136/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</content:encoded></item>
<item>
<feedburner:origLink>https://www.hanselman.com/blog/net-6-hot-reload-and-refused-to-connect-to-ws-because-it-violates-the-content-security-policy-directive-because-web-sockets</feedburner:origLink><trackback:ping>https://www.hanselman.com/blog/feed/trackback/d9e0f2ec-d7fd-484e-9b60-35cc70ab1398</trackback:ping><pingback:server>https://www.hanselman.com/blog/feed/pingback</pingback:server><pingback:target>https://www.hanselman.com/blog/post/d9e0f2ec-d7fd-484e-9b60-35cc70ab1398</pingback:target><dc:creator>Scott Hanselman</dc:creator><wfw:comment>http://feeds.hanselman.com/~/673288256/0/scotthanselman~NET-Hot-Reload-and-Refused-to-connect-to-ws-because-it-violates-the-Content-Security-Policy-directive-because-Web-Sockets/comments#comments-start</wfw:comment><wfw:commentRss>https://www.hanselman.com/blog/feed/rss/comments/d9e0f2ec-d7fd-484e-9b60-35cc70ab1398</wfw:commentRss><slash:comments>7</slash:comments><title>.NET 6 Hot Reload and "Refused to connect to ws: because it violates the Content Security Policy directive" because Web Sockets</title><guid isPermaLink="false">https://www.hanselman.com/blog/post/d9e0f2ec-d7fd-484e-9b60-35cc70ab1398</guid><link>http://feeds.hanselman.com/~/673288256/0/scotthanselman~NET-Hot-Reload-and-Refused-to-connect-to-ws-because-it-violates-the-Content-Security-Policy-directive-because-Web-Sockets</link><pubDate>Tue, 16 Nov 2021 19:37:00 GMT</pubDate><description><![CDATA[<div><p>If you're excited about <a href="https://www.youtube.com/watch?v=4S3vPzawnoQ">Hot Reload</a> like me AND you also <a href="https://www.hanselman.com/blog/easily-adding-security-headers-to-your-aspnet-core-web-app-and-getting-an-a-grade">want an "A" grade</a> from <a href="http://securityheaders.com">SecurityHeaders.com</a> (really, go try this now) then you will learn very quickly about <a href="https://content-security-policy.com/">Content-Security-Policy</a> headers. You need to spend some time reading and you may end up with a somewhat sophisticated list of allowed things, scripts, stylesheets, etc.</p> <p>In <a href="https://github.com/poppastring/dasblog-core">DasBlog Core</a> (the cross platform blog engine that runs this blog) Mark Downie makes these configurable and uses the NWebSpec ASP.NET Middleware library to add the needed headers.</p><pre class="brush: csharp; gutter: false; toolbar: false; auto-links: false; smart-tabs: false;">if (SecurityStyleSources != null &amp;&amp; SecurityScriptSources != null &amp;&amp; DefaultSources != null)<br>{<br>    app.UseCsp(options =&gt; options<br>        .DefaultSources(s =&gt; s.Self()<br>            .CustomSources(DefaultSources)<br>            )<br>        .StyleSources(s =&gt; s.Self()<br>            .CustomSources(SecurityStyleSources)<br>            .UnsafeInline()<br>        )<br>        .ScriptSources(s =&gt; s.Self()<br>               .CustomSources(SecurityScriptSources)<br>            .UnsafeInline()<br>            .UnsafeEval()<br>        )<br>    );<br>}
</pre>
<p>Each of those variables comes out of a config file. Yes, it would be more security if they came out of a vault or were even hard coded.</p>
<p>DasBlog is a pretty large and cool app and we noticed immediately upon Mark upgrading it to .NET 6 that we were unable to use Hot Reload (via dotnet watch or from VS 2022). We can complain about it, or we can learn about how it works and why it's not working for us! </p>
<blockquote>
<p>Remember: <a href="https://www.hanselman.com/blog/the-internet-is-not-a-black-box-look-inside">Nothing in your computer is hidden from you</a>.</p></blockquote>
<p>Starting with a simple "View Source" we can see a JavaScript include at the very bottom that is definitely not mine!</p><pre class="brush: xml; gutter: false; toolbar: false; auto-links: false; smart-tabs: false;">&lt;script src="/_framework/aspnetcore-browser-refresh.js"&gt;&lt;/script&gt;
</pre>
<p>Ok, this makes sense as we know not only does HotReload support C# (code behinds) but also Markup via Razor Pages and changing CSS! It would definitely need to communicate "back home" to the runner which is either "dotnet watch" or VS2022.</p>
<p>If I change the ASPNETCORE_ENVIRONMENT to "Production" (either via launch.json, launchsettings, or an environment variable like this, I can see that extra HotReload helper script isn't there:</p><pre>C:\github\wshotreloadtest&gt;dotnet run --environment="Production"<br>Building...<br>info: Microsoft.Hosting.Lifetime[14]<br>      Now listening on: https://localhost:7216<br>info: Microsoft.Hosting.Lifetime[14]<br>      Now listening on: <a href="http://localhost:5216">http://localhost:5216</a></pre>
<blockquote>
<p><strong>Remember: </strong>You never want to use dotnet run in production! It's an SDK building command! You'll want to use dotnet exec your.dll, dotnet your.dll, or best of all, in .NET 6 just call the EXE directly! .\bin\Debug\net6.0\wshotreloadtest.exe in my example. Why? dotnet run will always assume it's in Development (you literally tell it to restore, build, and exec in one run command) if you run it. You'll note that running the actual EXE is always WAY faster as well! Don't ship your .NET SDK to your webserver and don't recompile the whole thing on startup in production!</p></blockquote>
<p>We can see that that aspnnetcore-browser-refresh.js is the client side of Development-time HotReload. Looking at our browser console we see :</p>
<p><img title="Refused to Connect because it violates a CSP Directive" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="Refused to Connect because it violates a CSP Directive" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/72550dc07007_14F70/image_1f22b882-9a3f-4fad-b201-fb0f26c86db6.png" width="574" height="159"></p><pre>Refused to connect to 'wss://localhost:62486/' <br>because it violates the following Content Security Policy <br>directive: "default-src 'self'". <br>Note that 'connect-src' was not explicitly set, <br>so 'default-src' is used as a fallback.</pre>
<p>That's a lot to think about. I started out my ASP.NET Web App's middle ware saying it was OK to talk "back to myself" but nowhere else. </p><pre>app.UseCsp(options =&gt; options.DefaultSources(s =&gt; s.Self())); </pre>
<p>Hm, self seems reasonable, why can't the browser connect BACK to the dotnet run'ed Kestrel Web Server? It's all localhost, right? Well, specifically it's http://localhost not ws://localhost, or even wss://localhost (that extra s is for secure) so I need to explicitly allow ws: or wss: or both, but only in Development.</p>
<p>Maybe like this (again, I'm using NWebSpec, but these are just HTTP Headers so you can literally just add them if you want, hardcoded.)</p><pre class="brush: csharp; gutter: false; toolbar: false; auto-links: false; smart-tabs: false;">app.UseCsp(options =&gt; options.DefaultSources(s =&gt; s.Self())<br>            .ConnectSources(s =&gt; s.CustomSources("wss://localhost:62895")));
</pre>
<p>But port numbers change, right? Let's do just wss:, only in Development. Now, if I'm using both CSPs and WebSockets (ws:, wss:) in Production, I'll need to be intentional about this.</p>
<p>What's the moral?</p>
<p><strong>If you start using CSP Headers to tighten things up, be conscious and aware of the headers you need for conveniences like Hot Reload in Development versus whatever things you may need in Production. </strong></p>
<p>Hope this helps save you some time!</p>
<hr>
<p><strong>Sponsor: </strong>At Rocket Mortgage® the work you do around here will be 100% impactful but won’t take all your free time, giving you the perfect work-life balance. Or as we call it, tech/life balance! <a href="https://hnsl.mn/3qVUu5O">Learn more.</a></p><br/><hr/>© 2021 Scott Hanselman. All rights reserved. <br/></div><div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/673288256/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/673288256/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/673288256/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/673288256/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</description><comments>http://feeds.hanselman.com/~/673288256/0/scotthanselman~NET-Hot-Reload-and-Refused-to-connect-to-ws-because-it-violates-the-Content-Security-Policy-directive-because-Web-Sockets/comments#comments-start</comments><category>DotNetCore</category><content:encoded><![CDATA[<div><p>If you're excited about <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.youtube.com/watch?v=4S3vPzawnoQ">Hot Reload</a> like me AND you also <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/easily-adding-security-headers-to-your-aspnet-core-web-app-and-getting-an-a-grade">want an "A" grade</a> from <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~securityheaders.com">SecurityHeaders.com</a> (really, go try this now) then you will learn very quickly about <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://content-security-policy.com/">Content-Security-Policy</a> headers. You need to spend some time reading and you may end up with a somewhat sophisticated list of allowed things, scripts, stylesheets, etc.</p> <p>In <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/poppastring/dasblog-core">DasBlog Core</a> (the cross platform blog engine that runs this blog) Mark Downie makes these configurable and uses the NWebSpec ASP.NET Middleware library to add the needed headers.</p><pre class="brush: csharp; gutter: false; toolbar: false; auto-links: false; smart-tabs: false;">if (SecurityStyleSources != null &amp;&amp; SecurityScriptSources != null &amp;&amp; DefaultSources != null)
<br>{
<br>    app.UseCsp(options =&gt; options
<br>        .DefaultSources(s =&gt; s.Self()
<br>            .CustomSources(DefaultSources)
<br>            )
<br>        .StyleSources(s =&gt; s.Self()
<br>            .CustomSources(SecurityStyleSources)
<br>            .UnsafeInline()
<br>        )
<br>        .ScriptSources(s =&gt; s.Self()
<br>               .CustomSources(SecurityScriptSources)
<br>            .UnsafeInline()
<br>            .UnsafeEval()
<br>        )
<br>    );
<br>}
</pre>
<p>Each of those variables comes out of a config file. Yes, it would be more security if they came out of a vault or were even hard coded.</p>
<p>DasBlog is a pretty large and cool app and we noticed immediately upon Mark upgrading it to .NET 6 that we were unable to use Hot Reload (via dotnet watch or from VS 2022). We can complain about it, or we can learn about how it works and why it's not working for us! </p>
<blockquote>
<p>Remember: <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/the-internet-is-not-a-black-box-look-inside">Nothing in your computer is hidden from you</a>.</p></blockquote>
<p>Starting with a simple "View Source" we can see a JavaScript include at the very bottom that is definitely not mine!</p><pre class="brush: xml; gutter: false; toolbar: false; auto-links: false; smart-tabs: false;">&lt;script src="https://www.hanselman.com/_framework/aspnetcore-browser-refresh.js"&gt;&lt;/script&gt;
</pre>
<p>Ok, this makes sense as we know not only does HotReload support C# (code behinds) but also Markup via Razor Pages and changing CSS! It would definitely need to communicate "back home" to the runner which is either "dotnet watch" or VS2022.</p>
<p>If I change the ASPNETCORE_ENVIRONMENT to "Production" (either via launch.json, launchsettings, or an environment variable like this, I can see that extra HotReload helper script isn't there:</p><pre>C:\github\wshotreloadtest&gt;dotnet run --environment="Production"
<br>Building...
<br>info: Microsoft.Hosting.Lifetime[14]
<br>      Now listening on: https://localhost:7216
<br>info: Microsoft.Hosting.Lifetime[14]
<br>      Now listening on: <a href="http://localhost:5216">http://localhost:5216</a></pre>
<blockquote>
<p><strong>Remember: </strong>You never want to use dotnet run in production! It's an SDK building command! You'll want to use dotnet exec your.dll, dotnet your.dll, or best of all, in .NET 6 just call the EXE directly! .\bin\Debug\net6.0\wshotreloadtest.exe in my example. Why? dotnet run will always assume it's in Development (you literally tell it to restore, build, and exec in one run command) if you run it. You'll note that running the actual EXE is always WAY faster as well! Don't ship your .NET SDK to your webserver and don't recompile the whole thing on startup in production!</p></blockquote>
<p>We can see that that aspnnetcore-browser-refresh.js is the client side of Development-time HotReload. Looking at our browser console we see :</p>
<p><img title="Refused to Connect because it violates a CSP Directive" style="border-top: 0px; border-right: 0px; background-image: none; border-bottom: 0px; padding-top: 0px; padding-left: 0px; border-left: 0px; display: inline; padding-right: 0px" border="0" alt="Refused to Connect because it violates a CSP Directive" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/72550dc07007_14F70/image_1f22b882-9a3f-4fad-b201-fb0f26c86db6.png" width="574" height="159"></p><pre>Refused to connect to 'wss://localhost:62486/' 
<br>because it violates the following Content Security Policy 
<br>directive: "default-src 'self'". 
<br>Note that 'connect-src' was not explicitly set, 
<br>so 'default-src' is used as a fallback.</pre>
<p>That's a lot to think about. I started out my ASP.NET Web App's middle ware saying it was OK to talk "back to myself" but nowhere else. </p><pre>app.UseCsp(options =&gt; options.DefaultSources(s =&gt; s.Self())); </pre>
<p>Hm, self seems reasonable, why can't the browser connect BACK to the dotnet run'ed Kestrel Web Server? It's all localhost, right? Well, specifically it's http://localhost not ws://localhost, or even wss://localhost (that extra s is for secure) so I need to explicitly allow ws: or wss: or both, but only in Development.</p>
<p>Maybe like this (again, I'm using NWebSpec, but these are just HTTP Headers so you can literally just add them if you want, hardcoded.)</p><pre class="brush: csharp; gutter: false; toolbar: false; auto-links: false; smart-tabs: false;">app.UseCsp(options =&gt; options.DefaultSources(s =&gt; s.Self())
<br>            .ConnectSources(s =&gt; s.CustomSources("wss://localhost:62895")));
</pre>
<p>But port numbers change, right? Let's do just wss:, only in Development. Now, if I'm using both CSPs and WebSockets (ws:, wss:) in Production, I'll need to be intentional about this.</p>
<p>What's the moral?</p>
<p><strong>If you start using CSP Headers to tighten things up, be conscious and aware of the headers you need for conveniences like Hot Reload in Development versus whatever things you may need in Production. </strong></p>
<p>Hope this helps save you some time!</p>
<hr>
<p><strong>Sponsor: </strong>At Rocket Mortgage® the work you do around here will be 100% impactful but won’t take all your free time, giving you the perfect work-life balance. Or as we call it, tech/life balance! <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hnsl.mn/3qVUu5O">Learn more.</a></p>
<br/><hr/>© 2021 Scott Hanselman. All rights reserved. 
<br/></div><Img align="left" border="0" height="1" width="1" alt="" style="border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;" hspace="0" src="http://feeds.hanselman.com/~/i/673288256/0/scotthanselman">
<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/673288256/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/673288256/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/673288256/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/673288256/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</content:encoded></item>
<item>
<feedburner:origLink>https://www.hanselman.com/blog/dotnetconf-2021-net-everywhere-windows-linux-and-beyond</feedburner:origLink><trackback:ping>https://www.hanselman.com/blog/feed/trackback/a3e8448a-7bc5-4256-b945-ac12db42970d</trackback:ping><pingback:server>https://www.hanselman.com/blog/feed/pingback</pingback:server><pingback:target>https://www.hanselman.com/blog/post/a3e8448a-7bc5-4256-b945-ac12db42970d</pingback:target><dc:creator>Scott Hanselman</dc:creator><wfw:comment>http://feeds.hanselman.com/~/672997660/0/scotthanselman~DotNetConf-NET-Everywhere-Windows-Linux-and-Beyond/comments#comments-start</wfw:comment><wfw:commentRss>https://www.hanselman.com/blog/feed/rss/comments/a3e8448a-7bc5-4256-b945-ac12db42970d</wfw:commentRss><slash:comments>5</slash:comments><title>DotNetConf 2021 - .NET Everywhere - Windows, Linux, and Beyond</title><guid isPermaLink="false">https://www.hanselman.com/blog/post/a3e8448a-7bc5-4256-b945-ac12db42970d</guid><link>http://feeds.hanselman.com/~/672997660/0/scotthanselman~DotNetConf-NET-Everywhere-Windows-Linux-and-Beyond</link><pubDate>Thu, 11 Nov 2021 21:07:00 GMT</pubDate><description><![CDATA[<div><p><a href="https://dotnet.microsoft.com/">.NET 6</a> is released and it's a LTS release which means it'll be fully and actively supported for the next 3 years. If you've been paused waiting for the right time to upgrade to .NET 6, it's a good time to make the move!</p> <p>The .NET Upgrade Assistant can take Windows Forms, WPF, ASP.NET MVC, Console Apps, and Libraries and help you - interactively - upgrade them to .NET 6. </p> <p>Why bother?</p> <ul> <li><a href="https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-6/">Massive and ongoing performance improvements</a>  <li>No need to count on .NET being on the user's machine. You can ship you own version of .NET and embed it inside your EXE! Check out <a href="https://docs.microsoft.com/en-us/dotnet/core/deploying/single-file">Single File Deployment</a>.  <li>Tons of new C# 10 features, but they are optional, so your existing code works great but you can also "refactor via subtraction" and check out things like implicit usings.  <li>Optional Profile-guided optimization (PGO) is where the JIT compiler generates optimized code in terms of the types and code paths that are most frequently used. This can mean even MORE free performance!  <li><a href="https://devblogs.microsoft.com/dotnet/conversation-about-crossgen2/">Crossgen2</a> can dramatically improve your startup time  <li>Support for macOS Arm64 (or "Apple M1 Silicon") and Windows Arm64 operating systems, for both native Arm64 execution and x64 emulation. In addition, the x64 and Arm64 .NET installers now install side by side. For more info, see <a href="https://github.com/dotnet/sdk/issues/22380">.NET Support for macOS 11 and Windows 11 for Arm64 and x64</a>.  <li><a href="https://www.youtube.com/watch?v=4S3vPzawnoQ">Hot Reload</a> - just make changes and your app changes...even if you're coding in Notepad!  <li>And <a href="https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-6">tons more</a>!</li></ul> <p>Check out my .NET Conf 2022 video where I see how many places I can run .NET! Windows, Linux, Docker, Mac, Raspberry Pi, even <a href="https://www.hanselman.com/blog/how-to-install-net-core-on-your-remarkable-2-eink-tablet-with-remarkablenet">a Remarkable 2 eInk tablet</a>. Enjoy!</p> <p>&nbsp;</p> <center> <div class="embed-container"><iframe title="YouTube video player" height="315" src="https://www.youtube.com/embed/ZM6OO2lkxA4" frameborder="0" width="560" allowfullscreen allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe></div></center> <p>Be sure to watch and enjoy <a href="https://www.youtube.com/watch?v=HIW86m-kJl0&amp;list=PLdo4fOcmZ0oVFtp9MDEBNbA2sSqYvXSXO">ALL the great .NET Conf 2022 videos up on YouTube today</a>.</p> <hr>  <p><strong>Sponsor: </strong>Lob’s developer-friendly APIs make it easy to send a letter, check, or postcard, as easily as email. Design dynamic HTML templates to personalize mail for maximum impact.<a href="http://pubads.g.doubleclick.net/gampad/clk?id=5828753686&amp;iu=/6839/lqm.scotthanselman.site"> Start Exploring with Postman!</a></p><br/><hr/>© 2021 Scott Hanselman. All rights reserved. <br/></div><div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/672997660/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/672997660/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/672997660/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/672997660/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</description><comments>http://feeds.hanselman.com/~/672997660/0/scotthanselman~DotNetConf-NET-Everywhere-Windows-Linux-and-Beyond/comments#comments-start</comments><category>DotNetCore</category><category>Open Source</category><content:encoded><![CDATA[<div><p><a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://dotnet.microsoft.com/">.NET 6</a> is released and it's a LTS release which means it'll be fully and actively supported for the next 3 years. If you've been paused waiting for the right time to upgrade to .NET 6, it's a good time to make the move!</p> <p>The .NET Upgrade Assistant can take Windows Forms, WPF, ASP.NET MVC, Console Apps, and Libraries and help you - interactively - upgrade them to .NET 6. </p> <p>Why bother?</p> <ul> <li><a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-6/">Massive and ongoing performance improvements</a>  <li>No need to count on .NET being on the user's machine. You can ship you own version of .NET and embed it inside your EXE! Check out <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/dotnet/core/deploying/single-file">Single File Deployment</a>.  <li>Tons of new C# 10 features, but they are optional, so your existing code works great but you can also "refactor via subtraction" and check out things like implicit usings.  <li>Optional Profile-guided optimization (PGO) is where the JIT compiler generates optimized code in terms of the types and code paths that are most frequently used. This can mean even MORE free performance!  <li><a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://devblogs.microsoft.com/dotnet/conversation-about-crossgen2/">Crossgen2</a> can dramatically improve your startup time  <li>Support for macOS Arm64 (or "Apple M1 Silicon") and Windows Arm64 operating systems, for both native Arm64 execution and x64 emulation. In addition, the x64 and Arm64 .NET installers now install side by side. For more info, see <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/dotnet/sdk/issues/22380">.NET Support for macOS 11 and Windows 11 for Arm64 and x64</a>.  <li><a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.youtube.com/watch?v=4S3vPzawnoQ">Hot Reload</a> - just make changes and your app changes...even if you're coding in Notepad!  <li>And <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-6">tons more</a>!</li></ul> <p>Check out my .NET Conf 2022 video where I see how many places I can run .NET! Windows, Linux, Docker, Mac, Raspberry Pi, even <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/how-to-install-net-core-on-your-remarkable-2-eink-tablet-with-remarkablenet">a Remarkable 2 eInk tablet</a>. Enjoy!</p> <p>&nbsp;</p> <center> <div class="embed-container"><iframe title="YouTube video player" height="315" src="https://www.youtube.com/embed/ZM6OO2lkxA4" frameborder="0" width="560" allowfullscreen allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe></div></center> <p>Be sure to watch and enjoy <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.youtube.com/watch?v=HIW86m-kJl0&amp;list=PLdo4fOcmZ0oVFtp9MDEBNbA2sSqYvXSXO">ALL the great .NET Conf 2022 videos up on YouTube today</a>.</p> <hr>  <p><strong>Sponsor: </strong>Lob’s developer-friendly APIs make it easy to send a letter, check, or postcard, as easily as email. Design dynamic HTML templates to personalize mail for maximum impact.<a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~pubads.g.doubleclick.net/gampad/clk?id=5828753686&amp;iu=/6839/lqm.scotthanselman.site"> Start Exploring with Postman!</a></p>
<br/><hr/>© 2021 Scott Hanselman. All rights reserved. 
<br/></div><Img align="left" border="0" height="1" width="1" alt="" style="border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;" hspace="0" src="http://feeds.hanselman.com/~/i/672997660/0/scotthanselman">
<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/672997660/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/672997660/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/672997660/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/672997660/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</content:encoded></item>
<item>
<feedburner:origLink>https://www.hanselman.com/blog/lets-upgrade-my-main-site-and-podcast-to-net-6-lts</feedburner:origLink><trackback:ping>https://www.hanselman.com/blog/feed/trackback/5640a57a-b161-4d16-b72c-e8d4d8d9c1e3</trackback:ping><pingback:server>https://www.hanselman.com/blog/feed/pingback</pingback:server><pingback:target>https://www.hanselman.com/blog/post/5640a57a-b161-4d16-b72c-e8d4d8d9c1e3</pingback:target><dc:creator>Scott Hanselman</dc:creator><wfw:comment>http://feeds.hanselman.com/~/672999470/0/scotthanselman~Lets-upgrade-my-main-site-and-podcast-to-NET-LTS/comments#comments-start</wfw:comment><wfw:commentRss>https://www.hanselman.com/blog/feed/rss/comments/5640a57a-b161-4d16-b72c-e8d4d8d9c1e3</wfw:commentRss><slash:comments>4</slash:comments><title>Let's upgrade my main site and podcast to .NET 6 LTS</title><guid isPermaLink="false">https://www.hanselman.com/blog/post/5640a57a-b161-4d16-b72c-e8d4d8d9c1e3</guid><link>http://feeds.hanselman.com/~/672999470/0/scotthanselman~Lets-upgrade-my-main-site-and-podcast-to-NET-LTS</link><pubDate>Tue, 09 Nov 2021 18:43:00 GMT</pubDate><description><![CDATA[<div><p><a href="https://dotnet.microsoft.com/?WT.mc_id=-blog-scottha">.NET 6</a> is released and it's a LTS release which means it'll be fully and actively supported for the next 3 years. If you've been paused waiting for the right time to upgrade to .NET 6, it's a good time to make the move!</p> <p>Right now, <a href="https://www.hanselman.com/">Hanselman.com</a> and <a href="http://www.Hanselminutes.com">Hanselminutes.com</a> (my podcast) are running on some version of .NET 5. You can se by visiting them and scrolling to the very bottom in the footer as I've <a href="https://www.hanselman.com/blog/adding-a-git-commit-hash-and-azure-devops-build-number-and-build-id-to-an-aspnet-website">added a git commit hash and Azure DevOps Build Number and Build ID to an ASP.NET website</a> and I'm using <a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.runtimeinformation.frameworkdescription?view=net-5.0">RuntimeInformation.FrameworkDescription</a> to output the plain text version of .NET I'm using. This blog is on .NET Core 3.0 which is an LTS release but I'll be working with Mark Downie this week to move it to .NET 6 LTS as he's already got his instance of dasBlog running on 6!</p><figure><img title="&copy; Copyright 2021, Scott Hanselman. Design by @jzy, Powered by .NET 5.0.10 and deployed from commit e5058e via build 20210920.3" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="&copy; Copyright 2021, Scott Hanselman. Design by @jzy, Powered by .NET 5.0.10 and deployed from commit e5058e via build 20210920.3" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/8b9dedfc5c6c_13FA9/image_2dd680f0-71f7-45e1-8101-d1c90157ce50.png" width="999" height="41"></figure>  <p>OK, let's see what's involved. Let's start with my podcast site. I've got the code on GitHub and running locally with "dotnet run" on the command line in both Linux and Windows. I can run the "dotnet upgrade assistant" which is great, but I also like to drive stick shift sometimes for smaller projects.</p> <p>I'll update my TargetFramework in my csproj project file from net5.0 to net6.0 and update the major PackageReferences from 5.0.0 to 6.0.0. It compiles.</p> <p>Optionally, I'll also run "<a href="https://www.hanselman.com/blog/your-dotnet-outdated-is-outdated-update-and-help-keep-your-net-projects-up-to-date">dotnet outdated</a>" which is one of my favorite tools. You'll want to make sure you have a solid test suite and not just do this without testing.</p><figure><a href="https://www.hanselman.com/blog/your-dotnet-outdated-is-outdated-update-and-help-keep-your-net-projects-up-to-date"><img title="dotnet outdated tells me which packages need updating" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="dotnet outdated tells me which packages need updating" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/8b9dedfc5c6c_13FA9/image_1f913deb-d95e-4797-846f-7339e98be203.png" width="999" height="381"></a></figure>  <p>I see that some of these are major changes so I can do a diff of these packages with a number of tools, but my favorite is <a href="http://fuget.org">FuGet.org</a> (Thanks Frank!) so I can do a <a href="https://www.fuget.org/packages/Selenium.WebDriver/4.0.1/lib/netstandard2.1/diff/4.0.0-alpha07/">diff between the alpha version of Selenium I'm using</a> and the released see that the RemoteLogs type is now called Logs.</p> <p>I will also update my Dockerfile and change versions like this</p><pre>FROM mcr.microsoft.com/dotnet/sdk:6.0 as build</pre>
<p>and</p><pre>FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS runtime</pre>
<p>I'll confirm that these images build and test. I also run my tests optionally inside a container so that's nice.</p>
<p>Some of my sites use Azure DevOps and others use GitHub Actions. Both use YAML (yay) to manage their config, so I'll update my UseDotNet task in Azure DevOps YAML to version: "6.0.x"</p>
<p>I'll commit and start building in the cloud!</p><pre>Changes to be committed:<br>  (use "git restore --staged &lt;file&gt;..." to unstage)<br>        modified:   Dockerfile<br>        modified:   azure-pipelines.yml<br>        modified:   hanselminutes.core.tests/SeleniumTests.cs<br>        modified:   hanselminutes.core.tests/hanselminutes.core.tests.csproj<br>        modified:   hanselminutes.core/Startup.cs<br>        modified:   hanselminutes.core/hanselminutes-core.csproj<br><br>$ git commit -m "upgrade to .net 6"</pre>
<p>I will also confirm that my Azure App Service is set to .NET 6, but this is only needed if I'm NOT running in a Docker Container or if I'm NOT using a self-contained executable.</p>
<p>Now I repeat this for my podcast and main site and I'm now on .NET 6! The blog (a larger upgrade) is next.</p>
<hr>
<p><strong>Sponsor: </strong>Lob’s developer-friendly APIs make it easy to send a letter, check, or postcard, as easily as email. Design dynamic HTML templates to personalize mail for maximum impact.<a href="http://pubads.g.doubleclick.net/gampad/clk?id=5828753686&amp;iu=/6839/lqm.scotthanselman.site"> Start Exploring with Postman!</a></p><br/><hr/>© 2021 Scott Hanselman. All rights reserved. <br/></div><div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/672999470/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/672999470/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/672999470/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/672999470/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</description><comments>http://feeds.hanselman.com/~/672999470/0/scotthanselman~Lets-upgrade-my-main-site-and-podcast-to-NET-LTS/comments#comments-start</comments><category>Blogging</category><category>DotNetCore</category><content:encoded><![CDATA[<div><p><a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://dotnet.microsoft.com/?WT.mc_id=-blog-scottha">.NET 6</a> is released and it's a LTS release which means it'll be fully and actively supported for the next 3 years. If you've been paused waiting for the right time to upgrade to .NET 6, it's a good time to make the move!</p> <p>Right now, <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/">Hanselman.com</a> and <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~www.Hanselminutes.com">Hanselminutes.com</a> (my podcast) are running on some version of .NET 5. You can se by visiting them and scrolling to the very bottom in the footer as I've <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/adding-a-git-commit-hash-and-azure-devops-build-number-and-build-id-to-an-aspnet-website">added a git commit hash and Azure DevOps Build Number and Build ID to an ASP.NET website</a> and I'm using <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.runtimeinformation.frameworkdescription?view=net-5.0">RuntimeInformation.FrameworkDescription</a> to output the plain text version of .NET I'm using. This blog is on .NET Core 3.0 which is an LTS release but I'll be working with Mark Downie this week to move it to .NET 6 LTS as he's already got his instance of dasBlog running on 6!</p><figure><img title="&copy; Copyright 2021, Scott Hanselman. Design by @jzy, Powered by .NET 5.0.10 and deployed from commit e5058e via build 20210920.3" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="&copy; Copyright 2021, Scott Hanselman. Design by @jzy, Powered by .NET 5.0.10 and deployed from commit e5058e via build 20210920.3" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/8b9dedfc5c6c_13FA9/image_2dd680f0-71f7-45e1-8101-d1c90157ce50.png" width="999" height="41"></figure>  <p>OK, let's see what's involved. Let's start with my podcast site. I've got the code on GitHub and running locally with "dotnet run" on the command line in both Linux and Windows. I can run the "dotnet upgrade assistant" which is great, but I also like to drive stick shift sometimes for smaller projects.</p> <p>I'll update my TargetFramework in my csproj project file from net5.0 to net6.0 and update the major PackageReferences from 5.0.0 to 6.0.0. It compiles.</p> <p>Optionally, I'll also run "<a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/your-dotnet-outdated-is-outdated-update-and-help-keep-your-net-projects-up-to-date">dotnet outdated</a>" which is one of my favorite tools. You'll want to make sure you have a solid test suite and not just do this without testing.</p><figure><a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/your-dotnet-outdated-is-outdated-update-and-help-keep-your-net-projects-up-to-date"><img title="dotnet outdated tells me which packages need updating" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="dotnet outdated tells me which packages need updating" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/8b9dedfc5c6c_13FA9/image_1f913deb-d95e-4797-846f-7339e98be203.png" width="999" height="381"></a></figure>  <p>I see that some of these are major changes so I can do a diff of these packages with a number of tools, but my favorite is <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~fuget.org">FuGet.org</a> (Thanks Frank!) so I can do a <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.fuget.org/packages/Selenium.WebDriver/4.0.1/lib/netstandard2.1/diff/4.0.0-alpha07/">diff between the alpha version of Selenium I'm using</a> and the released see that the RemoteLogs type is now called Logs.</p> <p>I will also update my Dockerfile and change versions like this</p><pre>FROM mcr.microsoft.com/dotnet/sdk:6.0 as build</pre>
<p>and</p><pre>FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS runtime</pre>
<p>I'll confirm that these images build and test. I also run my tests optionally inside a container so that's nice.</p>
<p>Some of my sites use Azure DevOps and others use GitHub Actions. Both use YAML (yay) to manage their config, so I'll update my UseDotNet task in Azure DevOps YAML to version: "6.0.x"</p>
<p>I'll commit and start building in the cloud!</p><pre>Changes to be committed:
<br>  (use "git restore --staged &lt;file&gt;..." to unstage)
<br>        modified:   Dockerfile
<br>        modified:   azure-pipelines.yml
<br>        modified:   hanselminutes.core.tests/SeleniumTests.cs
<br>        modified:   hanselminutes.core.tests/hanselminutes.core.tests.csproj
<br>        modified:   hanselminutes.core/Startup.cs
<br>        modified:   hanselminutes.core/hanselminutes-core.csproj
<br>
<br>$ git commit -m "upgrade to .net 6"</pre>
<p>I will also confirm that my Azure App Service is set to .NET 6, but this is only needed if I'm NOT running in a Docker Container or if I'm NOT using a self-contained executable.</p>
<p>Now I repeat this for my podcast and main site and I'm now on .NET 6! The blog (a larger upgrade) is next.</p>
<hr>
<p><strong>Sponsor: </strong>Lob’s developer-friendly APIs make it easy to send a letter, check, or postcard, as easily as email. Design dynamic HTML templates to personalize mail for maximum impact.<a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~pubads.g.doubleclick.net/gampad/clk?id=5828753686&amp;iu=/6839/lqm.scotthanselman.site"> Start Exploring with Postman!</a></p>
<br/><hr/>© 2021 Scott Hanselman. All rights reserved. 
<br/></div><Img align="left" border="0" height="1" width="1" alt="" style="border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;" hspace="0" src="http://feeds.hanselman.com/~/i/672999470/0/scotthanselman">
<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/672999470/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/672999470/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/672999470/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/672999470/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</content:encoded></item>
<item>
<feedburner:origLink>https://www.hanselman.com/blog/powershell-720-could-not-load-type-systemmanagementautomationsubsystempredictionresult</feedburner:origLink><trackback:ping>https://www.hanselman.com/blog/feed/trackback/6b5f7bee-a5e6-4a55-a922-96080fbf89de</trackback:ping><pingback:server>https://www.hanselman.com/blog/feed/pingback</pingback:server><pingback:target>https://www.hanselman.com/blog/post/6b5f7bee-a5e6-4a55-a922-96080fbf89de</pingback:target><dc:creator>Scott Hanselman</dc:creator><wfw:comment>http://feeds.hanselman.com/~/672517972/0/scotthanselman~PowerShell-Could-not-load-type-SystemManagementAutomationSubsystemPredictionResult/comments#comments-start</wfw:comment><wfw:commentRss>https://www.hanselman.com/blog/feed/rss/comments/6b5f7bee-a5e6-4a55-a922-96080fbf89de</wfw:commentRss><slash:comments>9</slash:comments><title>PowerShell 7.2.0 - Could not load type System.Management.Automation.Subsystem.PredictionResult</title><guid isPermaLink="false">https://www.hanselman.com/blog/post/6b5f7bee-a5e6-4a55-a922-96080fbf89de</guid><link>http://feeds.hanselman.com/~/672517972/0/scotthanselman~PowerShell-Could-not-load-type-SystemManagementAutomationSubsystemPredictionResult</link><pubDate>Thu, 04 Nov 2021 17:21:00 GMT</pubDate><description><![CDATA[<div><p>My PowerShell upgraded to the new PowerShell 7.2.0 and it happened automatically since I <a href="https://www.microsoft.com/en-us/p/powershell/9mz1snwt0n5d?activetab=pivot:overviewtab">get PowerShell from the Windows Store</a>. However, <a href="https://www.hanselman.com/blog/my-ultimate-powershell-prompt-with-oh-my-posh-and-the-windows-terminal">my fancy prompt</a> use <a href="https://www.hanselman.com/blog/adding-predictive-intellisense-to-my-windows-terminal-powershell-prompt-with-psreadline">PSReadLine with Predictive Autocomplete</a> stopped working suddenly.</p><figure><img style="margin: 0px 0px 0px 5px" src="https://www.hanselman.com/blog/content/binary/psreadlinehistory.gif"></figure>  <p>However, suddenly I started getting this error on every prompt.</p><pre>Could not load type 'System.Management.Automation.Subsystem.PredictionResult' from assembly 'Microsoft.PowerShell.PSReadLine.Polyfiller, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.<br>   at Microsoft.PowerShell.PSConsoleReadLine.PredictionViewBase.Reset()<br>   at Microsoft.PowerShell.PSConsoleReadLine.PredictionInlineView.Reset()<br>   at Microsoft.PowerShell.PSConsoleReadLine.Prediction.Reset()<br>   at Microsoft.PowerShell.PSConsoleReadLine.Initialize(Runspace runspace, EngineIntrinsics engineIntrinsics)<br>   at Microsoft.PowerShell.PSConsoleReadLine.ReadLine(Runspace runspace, EngineIntrinsics engineIntrinsics, CancellationToken cancellationToken)</pre>
<p>Well, you can see I'm using a Beta of <a href="https://github.com/PowerShell/PSReadLine/issues">PSReadLine 2.2</a>:</p><pre>### Environment<br>PSReadLine: 2.2.0-beta2<br>PowerShell: 7.2.0</pre>
<p>But I have failed to keep it up to date, and when I got into this state, I realized just because my prompt wasn't pretty (momentarily) I could update it with one line while still staying on the Beta Train.</p><pre>Install-Module PSReadLine -AllowPrerelease -Force</pre>
<p>Now I'm on 2.2.0-beta4 and all is well and I have my cool prediction history back!</p>
<hr>
<p><strong>Sponsor:</strong> Couchbase Capella DBaaS is flexible, full-featured and fully managed&nbsp; with built-in access via K/V, SQL and full text search. It’s blazing fast, yet surprisingly affordable. <a href="https://hnsl.mn/3klopQv">Try Capella today for free</a>.</p><br/><hr/>© 2021 Scott Hanselman. All rights reserved. <br/></div><div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/672517972/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/672517972/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/672517972/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/672517972/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</description><comments>http://feeds.hanselman.com/~/672517972/0/scotthanselman~PowerShell-Could-not-load-type-SystemManagementAutomationSubsystemPredictionResult/comments#comments-start</comments><category>PowerShell</category><content:encoded><![CDATA[<div><p>My PowerShell upgraded to the new PowerShell 7.2.0 and it happened automatically since I <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.microsoft.com/en-us/p/powershell/9mz1snwt0n5d?activetab=pivot:overviewtab">get PowerShell from the Windows Store</a>. However, <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/my-ultimate-powershell-prompt-with-oh-my-posh-and-the-windows-terminal">my fancy prompt</a> use <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/adding-predictive-intellisense-to-my-windows-terminal-powershell-prompt-with-psreadline">PSReadLine with Predictive Autocomplete</a> stopped working suddenly.</p><figure><img style="margin: 0px 0px 0px 5px" src="https://www.hanselman.com/blog/content/binary/psreadlinehistory.gif"></figure>  <p>However, suddenly I started getting this error on every prompt.</p><pre>Could not load type 'System.Management.Automation.Subsystem.PredictionResult' from assembly 'Microsoft.PowerShell.PSReadLine.Polyfiller, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'.
<br>   at Microsoft.PowerShell.PSConsoleReadLine.PredictionViewBase.Reset()
<br>   at Microsoft.PowerShell.PSConsoleReadLine.PredictionInlineView.Reset()
<br>   at Microsoft.PowerShell.PSConsoleReadLine.Prediction.Reset()
<br>   at Microsoft.PowerShell.PSConsoleReadLine.Initialize(Runspace runspace, EngineIntrinsics engineIntrinsics)
<br>   at Microsoft.PowerShell.PSConsoleReadLine.ReadLine(Runspace runspace, EngineIntrinsics engineIntrinsics, CancellationToken cancellationToken)</pre>
<p>Well, you can see I'm using a Beta of <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://github.com/PowerShell/PSReadLine/issues">PSReadLine 2.2</a>:</p><pre>### Environment
<br>PSReadLine: 2.2.0-beta2
<br>PowerShell: 7.2.0</pre>
<p>But I have failed to keep it up to date, and when I got into this state, I realized just because my prompt wasn't pretty (momentarily) I could update it with one line while still staying on the Beta Train.</p><pre>Install-Module PSReadLine -AllowPrerelease -Force</pre>
<p>Now I'm on 2.2.0-beta4 and all is well and I have my cool prediction history back!</p>
<hr>
<p><strong>Sponsor:</strong> Couchbase Capella DBaaS is flexible, full-featured and fully managed&nbsp; with built-in access via K/V, SQL and full text search. It’s blazing fast, yet surprisingly affordable. <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hnsl.mn/3klopQv">Try Capella today for free</a>.</p>
<br/><hr/>© 2021 Scott Hanselman. All rights reserved. 
<br/></div><Img align="left" border="0" height="1" width="1" alt="" style="border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;" hspace="0" src="http://feeds.hanselman.com/~/i/672517972/0/scotthanselman">
<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/672517972/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/672517972/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/672517972/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/672517972/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</content:encoded></item>
<item>
<feedburner:origLink>https://www.hanselman.com/blog/wsl2-can-now-mount-linux-ext4-disks-directly</feedburner:origLink><trackback:ping>https://www.hanselman.com/blog/feed/trackback/384dc9f7-9053-4c0b-9337-56c3305b06f8</trackback:ping><pingback:server>https://www.hanselman.com/blog/feed/pingback</pingback:server><pingback:target>https://www.hanselman.com/blog/post/384dc9f7-9053-4c0b-9337-56c3305b06f8</pingback:target><dc:creator>Scott Hanselman</dc:creator><wfw:comment>http://feeds.hanselman.com/~/672517974/0/scotthanselman~WSL-can-now-mount-Linux-ext-disks-directly/comments#comments-start</wfw:comment><wfw:commentRss>https://www.hanselman.com/blog/feed/rss/comments/384dc9f7-9053-4c0b-9337-56c3305b06f8</wfw:commentRss><slash:comments>3</slash:comments><title>WSL2 can now mount Linux ext4 disks directly</title><guid isPermaLink="false">https://www.hanselman.com/blog/post/384dc9f7-9053-4c0b-9337-56c3305b06f8</guid><link>http://feeds.hanselman.com/~/672517974/0/scotthanselman~WSL-can-now-mount-Linux-ext-disks-directly</link><pubDate>Tue, 02 Nov 2021 19:21:00 GMT</pubDate><description><![CDATA[<div><p>If you're on a version of Windows 11 that is build 22000 or greater, you can now use <a href="https://docs.microsoft.com/en-us/windows/wsl/wsl2-mount-disk">WSL to mount Linux disks directly</a>. Run winver to see your Windows version. I'm on 22000.282 as of the time of this writing.</p> <p>I can also run wsl --help and see the --mount instructions. If you don't have them, you're not on the latest, or you can try installing/update WSL from the Windows Store. Installing WSL from the Windows Store gets you updates faster.</p><pre>--mount &lt;Disk&gt;<br>   Attaches and mounts a physical disk in all WSL2 distributions.<br>   Options:<br>    --bare<br>        Attach the disk to WSL2, but don't mount it.<br><br>    --type &lt;Type&gt;<br>        Filesystem to use when mounting a disk, if not specified defaults to ext4.<br><br>    --options &lt;Options&gt;<br>        Additional mount options.<br><br>    --partition &lt;Index&gt;<br>        Index of the partition to mount, if not specified defaults to the whole disk.<br><br>--unmount [Disk]<br>   Unmounts and detaches a disk from all WSL2 distributions.<br>   Unmounts and detaches all disks if called without argument.</pre>
<p>You'll need to be an admin to mount a disk. You can first get a list of all the disks using this PowerShell query:</p><pre class="brush: ps; gutter: false; toolbar: false; auto-links: false;">GET-CimInstance -query "SELECT * from Win32_DiskDrive"
</pre>
<p>The DeviceID is a path like \\.\SOMETHING and that's what matters.</p>
<p>Then you just <code>wsl --mount \\.\SOMETHING"</code>.</p>
<p>The device will appear under /mnt/wsl/SOMETHING in your Linux instance. You can mount unpartitioned disks like this, or you <a href="https://docs.microsoft.com/en-us/windows/wsl/wsl2-mount-disk">can mount partitioned disks</a>. Then you can run lsblk and see the partitions and they'll be under /dev/&lt;Device&gt;&lt;Partition&gt;. Once you know the partition number you can go back and <code>wsl --mount --\\.\SOMETHING --partition --type Filesystem</code>. The filesystem parameter is for things like vfat, etc for filesystems that have kernel support.</p><figure><img title="WSL --mount for ext4 and Linux File Systems on WSL2" style="margin: 0px 0px 0px 5px; display: inline" alt="WSL --mount for ext4 and Linux File Systems on WSL2" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/48174f927626_14873/wslmountsimple_570ad3fa-3f22-4788-b04d-abe0a82c7d02.jpg" width="999" height="660"></figure> 
<p>Today SD Cards and Flash Drives aren't working, but USB externals work and internal drives work, as well as VHDs.</p>
<hr>
<p><strong>Sponsor:</strong> Couchbase Capella DBaaS is flexible, full-featured and fully managed&nbsp; with built-in access via K/V, SQL and full text search. It’s blazing fast, yet surprisingly affordable. <a href="https://hnsl.mn/3klopQv">Try Capella today for free</a>.</p><br/><hr/>© 2021 Scott Hanselman. All rights reserved. <br/></div><div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/672517974/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/672517974/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/672517974/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/672517974/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</description><comments>http://feeds.hanselman.com/~/672517974/0/scotthanselman~WSL-can-now-mount-Linux-ext-disks-directly/comments#comments-start</comments><category>Linux</category><content:encoded><![CDATA[<div><p>If you're on a version of Windows 11 that is build 22000 or greater, you can now use <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/windows/wsl/wsl2-mount-disk">WSL to mount Linux disks directly</a>. Run winver to see your Windows version. I'm on 22000.282 as of the time of this writing.</p> <p>I can also run wsl --help and see the --mount instructions. If you don't have them, you're not on the latest, or you can try installing/update WSL from the Windows Store. Installing WSL from the Windows Store gets you updates faster.</p><pre>--mount &lt;Disk&gt;
<br>   Attaches and mounts a physical disk in all WSL2 distributions.
<br>   Options:
<br>    --bare
<br>        Attach the disk to WSL2, but don't mount it.
<br>
<br>    --type &lt;Type&gt;
<br>        Filesystem to use when mounting a disk, if not specified defaults to ext4.
<br>
<br>    --options &lt;Options&gt;
<br>        Additional mount options.
<br>
<br>    --partition &lt;Index&gt;
<br>        Index of the partition to mount, if not specified defaults to the whole disk.
<br>
<br>--unmount [Disk]
<br>   Unmounts and detaches a disk from all WSL2 distributions.
<br>   Unmounts and detaches all disks if called without argument.</pre>
<p>You'll need to be an admin to mount a disk. You can first get a list of all the disks using this PowerShell query:</p><pre class="brush: ps; gutter: false; toolbar: false; auto-links: false;">GET-CimInstance -query "SELECT * from Win32_DiskDrive"
</pre>
<p>The DeviceID is a path like \\.\SOMETHING and that's what matters.</p>
<p>Then you just <code>wsl --mount \\.\SOMETHING"</code>.</p>
<p>The device will appear under /mnt/wsl/SOMETHING in your Linux instance. You can mount unpartitioned disks like this, or you <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://docs.microsoft.com/en-us/windows/wsl/wsl2-mount-disk">can mount partitioned disks</a>. Then you can run lsblk and see the partitions and they'll be under /dev/&lt;Device&gt;&lt;Partition&gt;. Once you know the partition number you can go back and <code>wsl --mount --\\.\SOMETHING --partition --type Filesystem</code>. The filesystem parameter is for things like vfat, etc for filesystems that have kernel support.</p><figure><img title="WSL --mount for ext4 and Linux File Systems on WSL2" style="margin: 0px 0px 0px 5px; display: inline" alt="WSL --mount for ext4 and Linux File Systems on WSL2" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/48174f927626_14873/wslmountsimple_570ad3fa-3f22-4788-b04d-abe0a82c7d02.jpg" width="999" height="660"></figure> 
<p>Today SD Cards and Flash Drives aren't working, but USB externals work and internal drives work, as well as VHDs.</p>
<hr>
<p><strong>Sponsor:</strong> Couchbase Capella DBaaS is flexible, full-featured and fully managed&nbsp; with built-in access via K/V, SQL and full text search. It’s blazing fast, yet surprisingly affordable. <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hnsl.mn/3klopQv">Try Capella today for free</a>.</p>
<br/><hr/>© 2021 Scott Hanselman. All rights reserved. 
<br/></div><Img align="left" border="0" height="1" width="1" alt="" style="border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;" hspace="0" src="http://feeds.hanselman.com/~/i/672517974/0/scotthanselman">
<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/672517974/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/672517974/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/672517974/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/672517974/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</content:encoded></item>
<item>
<feedburner:origLink>https://www.hanselman.com/blog/how-to-set-the-default-user-for-a-wsl-distro-that-has-been-manually-installed-with-wsl-import</feedburner:origLink><trackback:ping>https://www.hanselman.com/blog/feed/trackback/cfe4598f-9391-4333-9972-0f20a7b4732e</trackback:ping><pingback:server>https://www.hanselman.com/blog/feed/pingback</pingback:server><pingback:target>https://www.hanselman.com/blog/post/cfe4598f-9391-4333-9972-0f20a7b4732e</pingback:target><dc:creator>Scott Hanselman</dc:creator><wfw:comment>http://feeds.hanselman.com/~/671512964/0/scotthanselman~How-to-set-the-default-user-for-a-WSL-distro-that-has-been-manually-installed-with-wsl-import/comments#comments-start</wfw:comment><wfw:commentRss>https://www.hanselman.com/blog/feed/rss/comments/cfe4598f-9391-4333-9972-0f20a7b4732e</wfw:commentRss><slash:comments>2</slash:comments><title>How to set the default user for a WSL distro that has been manually installed with wsl --import</title><guid isPermaLink="false">https://www.hanselman.com/blog/post/cfe4598f-9391-4333-9972-0f20a7b4732e</guid><link>http://feeds.hanselman.com/~/671512964/0/scotthanselman~How-to-set-the-default-user-for-a-WSL-distro-that-has-been-manually-installed-with-wsl-import</link><pubDate>Thu, 28 Oct 2021 17:51:00 GMT</pubDate><description><![CDATA[<div><p>I've blogged before on how to <a href="https://www.hanselman.com/blog/easily-move-wsl-distributions-between-windows-10-machines-with-import-and-export">easily move WSL distributions between Windows 10 machines with import and export.</a> I recently did a <a href="https://www.microsoft.com/en-us/software-download/windows11?">full fresh install of Windows 11</a> and wanted to bring my existing highly customized Ubuntu installation along with me. </p> <p>You can tar up (zip up) the user-mode parts of your WSL2 distributions like this:</p><pre>wsl --export Ubuntu-20.04 c:\Temp\UbuntuBackup.tar</pre>
<p>The part after --export is the distribution name that you can see from running <code>wsl --list -v</code>. The last argument is a full path and filename for the archive you want created.</p>
<p>Next, on the machine you've moved to, you'll do the reverse. Notice that I've changed the Distro name here, and you can if you want. Remember also that you can have as many Linux Distros installed as you want.</p><pre>wsl --import Ubuntu c:\Linux c:\Temp\UbuntuBackup.tar</pre>
<p>The Linux file system is stored in a VHDX (virtual hard drive), usually deep in AppData/Local/YadaYada, but this import is an opportunity for me to store it in C:\Linux which will also make it easier <a href="https://www.hanselman.com/blog/shrink-your-wsl2-virtual-disks-and-docker-images-and-reclaim-disk-space">to do maintenance on like Compact-VHD which shrinks your WSL2 disks</a>.</p>
<p>Here's the weird part. When you import a WSL2 distro manually, running that distro on the new machine will end up logging you in as root. It's forgotten that I'm "scott."</p>
<p>There's a lot of ways to fix this that involve the registry or passing in arguments to wsl, but I just want it to work when I run "<code>wsl</code>" or "<code>wsl -d distroname</code>."</p>
<p>Run your distro, and then edit /etc/wsl.conf and add a [user] section like this:</p><pre>[user]<br>default=scott</pre>
<p>This is the ideal way to set your WSL distro's default user for imported tars because it's stored inside the Linux file system and the setting will stick around when you export/import later on.</p><figure><img title="Linux on Windows" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Linux on Windows" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/151872df284f_C08/image_1713e04c-bc54-4743-9768-d9d6cd0273fc.png" width="999" height="506"></figure> 
<p>Hope this helps!</p>
<hr>
<p><strong>Sponsor: </strong>Lob APIs ensure your addresses are deliverable and everything you send arrives at the right place. Add address autocompletion and verification in minutes using React, Vue or Javascript - <a href="https://hnsl.mn/3mqNL0L">Try for free!</a></p><br/><hr/>© 2021 Scott Hanselman. All rights reserved. <br/></div><div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/671512964/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/671512964/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/671512964/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/671512964/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</description><comments>http://feeds.hanselman.com/~/671512964/0/scotthanselman~How-to-set-the-default-user-for-a-WSL-distro-that-has-been-manually-installed-with-wsl-import/comments#comments-start</comments><category>Linux</category><category>Win10</category><category>Win11</category><content:encoded><![CDATA[<div><p>I've blogged before on how to <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/easily-move-wsl-distributions-between-windows-10-machines-with-import-and-export">easily move WSL distributions between Windows 10 machines with import and export.</a> I recently did a <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.microsoft.com/en-us/software-download/windows11?">full fresh install of Windows 11</a> and wanted to bring my existing highly customized Ubuntu installation along with me. </p> <p>You can tar up (zip up) the user-mode parts of your WSL2 distributions like this:</p><pre>wsl --export Ubuntu-20.04 c:\Temp\UbuntuBackup.tar</pre>
<p>The part after --export is the distribution name that you can see from running <code>wsl --list -v</code>. The last argument is a full path and filename for the archive you want created.</p>
<p>Next, on the machine you've moved to, you'll do the reverse. Notice that I've changed the Distro name here, and you can if you want. Remember also that you can have as many Linux Distros installed as you want.</p><pre>wsl --import Ubuntu c:\Linux c:\Temp\UbuntuBackup.tar</pre>
<p>The Linux file system is stored in a VHDX (virtual hard drive), usually deep in AppData/Local/YadaYada, but this import is an opportunity for me to store it in C:\Linux which will also make it easier <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://www.hanselman.com/blog/shrink-your-wsl2-virtual-disks-and-docker-images-and-reclaim-disk-space">to do maintenance on like Compact-VHD which shrinks your WSL2 disks</a>.</p>
<p>Here's the weird part. When you import a WSL2 distro manually, running that distro on the new machine will end up logging you in as root. It's forgotten that I'm "scott."</p>
<p>There's a lot of ways to fix this that involve the registry or passing in arguments to wsl, but I just want it to work when I run "<code>wsl</code>" or "<code>wsl -d distroname</code>."</p>
<p>Run your distro, and then edit /etc/wsl.conf and add a [user] section like this:</p><pre>[user]
<br>default=scott</pre>
<p>This is the ideal way to set your WSL distro's default user for imported tars because it's stored inside the Linux file system and the setting will stick around when you export/import later on.</p><figure><img title="Linux on Windows" style="border-left-width: 0px; border-right-width: 0px; background-image: none; border-bottom-width: 0px; padding-top: 0px; padding-left: 0px; display: inline; padding-right: 0px; border-top-width: 0px" border="0" alt="Linux on Windows" src="https://www.hanselman.com/blog/content/binary/Windows-Live-Writer/151872df284f_C08/image_1713e04c-bc54-4743-9768-d9d6cd0273fc.png" width="999" height="506"></figure> 
<p>Hope this helps!</p>
<hr>
<p><strong>Sponsor: </strong>Lob APIs ensure your addresses are deliverable and everything you send arrives at the right place. Add address autocompletion and verification in minutes using React, Vue or Javascript - <a href="http://feeds.hanselman.com/~/t/0/0/scotthanselman/~https://hnsl.mn/3mqNL0L">Try for free!</a></p>
<br/><hr/>© 2021 Scott Hanselman. All rights reserved. 
<br/></div><Img align="left" border="0" height="1" width="1" alt="" style="border:0;float:left;margin:0;padding:0;width:1px!important;height:1px!important;" hspace="0" src="http://feeds.hanselman.com/~/i/671512964/0/scotthanselman">
<div style="clear:both;padding-top:0.2em;"><a title="Like on Facebook" href="http://feeds.hanselman.com/_/28/671512964/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/fblike20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Tweet This" href="http://feeds.hanselman.com/_/24/671512964/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/twitter20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by email" href="http://feeds.hanselman.com/_/19/671512964/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/email20.png" style="border:0;margin:0;padding:0;"></a>&#160;<a title="Subscribe by RSS" href="http://feeds.hanselman.com/_/20/671512964/scotthanselman"><img height="20" src="https://assets.feedblitz.com/i/rss20.png" style="border:0;margin:0;padding:0;"></a>&#160;</div>]]>
</content:encoded></item>
</channel></rss>

